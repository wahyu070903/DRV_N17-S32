
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080078b0  080078b0  000088b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800795c  0800795c  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  0800795c  0800795c  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800795c  0800795c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800795c  0800795c  0000895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007960  08007960  00008960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007964  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b90  20000060  080079c4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf0  080079c4  00009bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001763c  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d9  00000000  00000000  000206c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00023da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff9  00000000  00000000  00025208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a164  00000000  00000000  00026201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a3d  00000000  00000000  00040365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009559d  00000000  00000000  00058da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee33f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a4  00000000  00000000  000ee384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f3b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08007898 	.word	0x08007898

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08007898 	.word	0x08007898

08000150 <DRV_ReadRegister>:
            currentByte = currentByte >> 1;
        } // for CRC bit
    }
}

HAL_StatusTypeDef DRV_ReadRegister(uint8_t reg, uint32_t* value){
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	6039      	str	r1, [r7, #0]
 800015a:	71fb      	strb	r3, [r7, #7]
	uint8_t request[4];
	request[0] = 05;  // Slave Address (Default 0x05)
 800015c:	2305      	movs	r3, #5
 800015e:	743b      	strb	r3, [r7, #16]
	request[1] = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	747b      	strb	r3, [r7, #17]
	request[2] = 6;  // Read command
 8000164:	2306      	movs	r3, #6
 8000166:	74bb      	strb	r3, [r7, #18]
	request[3] = 0x6F;
 8000168:	236f      	movs	r3, #111	@ 0x6f
 800016a:	74fb      	strb	r3, [r7, #19]

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 800016c:	4819      	ldr	r0, [pc, #100]	@ (80001d4 <DRV_ReadRegister+0x84>)
 800016e:	f005 fd78 	bl	8005c62 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, request, 4, 500);
 8000172:	f107 0110 	add.w	r1, r7, #16
 8000176:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800017a:	2204      	movs	r2, #4
 800017c:	4815      	ldr	r0, [pc, #84]	@ (80001d4 <DRV_ReadRegister+0x84>)
 800017e:	f005 f943 	bl	8005408 <HAL_UART_Transmit>
 8000182:	4603      	mov	r3, r0
 8000184:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8000186:	7dfb      	ldrb	r3, [r7, #23]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <DRV_ReadRegister+0x40>
 800018c:	7dfb      	ldrb	r3, [r7, #23]
 800018e:	e01d      	b.n	80001cc <DRV_ReadRegister+0x7c>
	HAL_Delay(10);
 8000190:	200a      	movs	r0, #10
 8000192:	f000 fe1f 	bl	8000dd4 <HAL_Delay>
	HAL_HalfDuplex_EnableReceiver(&huart1);
 8000196:	480f      	ldr	r0, [pc, #60]	@ (80001d4 <DRV_ReadRegister+0x84>)
 8000198:	f005 fd96 	bl	8005cc8 <HAL_HalfDuplex_EnableReceiver>
	uint8_t response[8];
	status = HAL_UART_Receive(&huart1, response, 8, 500);
 800019c:	f107 0108 	add.w	r1, r7, #8
 80001a0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80001a4:	2208      	movs	r2, #8
 80001a6:	480b      	ldr	r0, [pc, #44]	@ (80001d4 <DRV_ReadRegister+0x84>)
 80001a8:	f005 f9b9 	bl	800551e <HAL_UART_Receive>
 80001ac:	4603      	mov	r3, r0
 80001ae:	75fb      	strb	r3, [r7, #23]
	//if (status != HAL_OK) return status;

	*value = (response[4] << 24) | (response[5] << 16) | (response[6] << 8) | response[7];
 80001b0:	7b3b      	ldrb	r3, [r7, #12]
 80001b2:	061a      	lsls	r2, r3, #24
 80001b4:	7b7b      	ldrb	r3, [r7, #13]
 80001b6:	041b      	lsls	r3, r3, #16
 80001b8:	431a      	orrs	r2, r3
 80001ba:	7bbb      	ldrb	r3, [r7, #14]
 80001bc:	021b      	lsls	r3, r3, #8
 80001be:	4313      	orrs	r3, r2
 80001c0:	7bfa      	ldrb	r2, [r7, #15]
 80001c2:	4313      	orrs	r3, r2
 80001c4:	461a      	mov	r2, r3
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 80001ca:	2300      	movs	r3, #0
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3718      	adds	r7, #24
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000c10 	.word	0x20000c10

080001d8 <encChangeDir>:
uint8_t raw_buffer[2] = {0};
uint16_t encoderReadings[FILTER_SIZE];
uint16_t filterIndex = 0;
uint16_t filteredValue = 0;

void encChangeDir(uint8_t direction){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	if(direction == 1){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d108      	bne.n	80001fa <encChangeDir+0x22>
		//Clockwise
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2120      	movs	r1, #32
 80001ec:	480a      	ldr	r0, [pc, #40]	@ (8000218 <encChangeDir+0x40>)
 80001ee:	f001 fb27 	bl	8001840 <HAL_GPIO_WritePin>
		rotation_direction = 1;
 80001f2:	4b0a      	ldr	r3, [pc, #40]	@ (800021c <encChangeDir+0x44>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	701a      	strb	r2, [r3, #0]
	}else if (direction == 0){
		//Counter clockwise
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
		rotation_direction = 0;
	}
}
 80001f8:	e00a      	b.n	8000210 <encChangeDir+0x38>
	}else if (direction == 0){
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d107      	bne.n	8000210 <encChangeDir+0x38>
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	2120      	movs	r1, #32
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <encChangeDir+0x40>)
 8000206:	f001 fb1b 	bl	8001840 <HAL_GPIO_WritePin>
		rotation_direction = 0;
 800020a:	4b04      	ldr	r3, [pc, #16]	@ (800021c <encChangeDir+0x44>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40010c00 	.word	0x40010c00
 800021c:	2000007c 	.word	0x2000007c

08000220 <encRead>:
	float angle_deg = (angle * 360.0) / 4096.0;

	*result = angle_deg;
}

void encRead(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, (ENC_ADDR << 1), AS5600_RAW_ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, raw_buffer, 2);
 8000226:	2302      	movs	r3, #2
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <encRead+0x20>)
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2301      	movs	r3, #1
 8000230:	220c      	movs	r2, #12
 8000232:	216c      	movs	r1, #108	@ 0x6c
 8000234:	4803      	ldr	r0, [pc, #12]	@ (8000244 <encRead+0x24>)
 8000236:	f001 fc73 	bl	8001b20 <HAL_I2C_Mem_Read_DMA>
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000084 	.word	0x20000084
 8000244:	20000b30 	.word	0x20000b30

08000248 <getCounter>:

int32_t getCounter(){
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	return accumulate_counter;
 800024c:	4b02      	ldr	r3, [pc, #8]	@ (8000258 <getCounter+0x10>)
 800024e:	681b      	ldr	r3, [r3, #0]
}
 8000250:	4618      	mov	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000080 	.word	0x20000080

0800025c <lowPassFilter>:

uint16_t lowPassFilter(uint16_t newData){
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	80fb      	strh	r3, [r7, #6]
	encoderReadings[filterIndex] = newData;
 8000266:	4b1c      	ldr	r3, [pc, #112]	@ (80002d8 <lowPassFilter+0x7c>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	4619      	mov	r1, r3
 800026c:	4a1b      	ldr	r2, [pc, #108]	@ (80002dc <lowPassFilter+0x80>)
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	filterIndex = (filterIndex + 1) % FILTER_SIZE;
 8000274:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <lowPassFilter+0x7c>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	425a      	negs	r2, r3
 800027c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000280:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000284:	bf58      	it	pl
 8000286:	4253      	negpl	r3, r2
 8000288:	b29a      	uxth	r2, r3
 800028a:	4b13      	ldr	r3, [pc, #76]	@ (80002d8 <lowPassFilter+0x7c>)
 800028c:	801a      	strh	r2, [r3, #0]

	int sum = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	e00a      	b.n	80002ae <lowPassFilter+0x52>
		sum += encoderReadings[i];
 8000298:	4a10      	ldr	r2, [pc, #64]	@ (80002dc <lowPassFilter+0x80>)
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a0:	461a      	mov	r2, r3
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	4413      	add	r3, r2
 80002a6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	3301      	adds	r3, #1
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80002b4:	dbf0      	blt.n	8000298 <lowPassFilter+0x3c>
	}

	filteredValue = sum / FILTER_SIZE;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da01      	bge.n	80002c0 <lowPassFilter+0x64>
 80002bc:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80002c0:	129b      	asrs	r3, r3, #10
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <lowPassFilter+0x84>)
 80002c6:	801a      	strh	r2, [r3, #0]

	return filteredValue;
 80002c8:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <lowPassFilter+0x84>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000888 	.word	0x20000888
 80002dc:	20000088 	.word	0x20000088
 80002e0:	2000088a 	.word	0x2000088a

080002e4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a2d      	ldr	r2, [pc, #180]	@ (80003a8 <HAL_I2C_MemRxCpltCallback+0xc4>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d154      	bne.n	80003a0 <HAL_I2C_MemRxCpltCallback+0xbc>
        uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 80002f6:	4b2d      	ldr	r3, [pc, #180]	@ (80003ac <HAL_I2C_MemRxCpltCallback+0xc8>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	021b      	lsls	r3, r3, #8
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	4b2b      	ldr	r3, [pc, #172]	@ (80003ac <HAL_I2C_MemRxCpltCallback+0xc8>)
 8000300:	785b      	ldrb	r3, [r3, #1]
 8000302:	b21b      	sxth	r3, r3
 8000304:	4313      	orrs	r3, r2
 8000306:	b21b      	sxth	r3, r3
 8000308:	817b      	strh	r3, [r7, #10]
        position_now = lowPassFilter(position_now);
 800030a:	897b      	ldrh	r3, [r7, #10]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffa5 	bl	800025c <lowPassFilter>
 8000312:	4603      	mov	r3, r0
 8000314:	817b      	strh	r3, [r7, #10]
        int32_t delta = (int32_t)(position_now - position_prev);
 8000316:	897b      	ldrh	r3, [r7, #10]
 8000318:	4a25      	ldr	r2, [pc, #148]	@ (80003b0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 800031a:	8812      	ldrh	r2, [r2, #0]
 800031c:	1a9b      	subs	r3, r3, r2
 800031e:	60fb      	str	r3, [r7, #12]

        if(rotation_direction){
 8000320:	4b24      	ldr	r3, [pc, #144]	@ (80003b4 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d00d      	beq.n	8000344 <HAL_I2C_MemRxCpltCallback+0x60>
        	if(delta > ENC_PPR/2){
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800032e:	dd03      	ble.n	8000338 <HAL_I2C_MemRxCpltCallback+0x54>
        		delta -= ENC_PPR;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8000336:	60fb      	str	r3, [r7, #12]
        	}
        	delta = abs(delta);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	2b00      	cmp	r3, #0
 800033c:	bfb8      	it	lt
 800033e:	425b      	neglt	r3, r3
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e00d      	b.n	8000360 <HAL_I2C_MemRxCpltCallback+0x7c>
        }else{
        	if(delta < -(ENC_PPR/2)){
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 800034a:	da03      	bge.n	8000354 <HAL_I2C_MemRxCpltCallback+0x70>
        		delta += ENC_PPR;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000352:	60fb      	str	r3, [r7, #12]
        	}
        	delta = -abs(delta);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b00      	cmp	r3, #0
 8000358:	bfb8      	it	lt
 800035a:	425b      	neglt	r3, r3
 800035c:	425b      	negs	r3, r3
 800035e:	60fb      	str	r3, [r7, #12]
        }

        accumulate_counter += delta;
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	4413      	add	r3, r2
 8000368:	4a13      	ldr	r2, [pc, #76]	@ (80003b8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800036a:	6013      	str	r3, [r2, #0]

        if(accumulate_counter >= ENC_MAX_COUNT){
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a12      	ldr	r2, [pc, #72]	@ (80003bc <HAL_I2C_MemRxCpltCallback+0xd8>)
 8000372:	4293      	cmp	r3, r2
 8000374:	dd06      	ble.n	8000384 <HAL_I2C_MemRxCpltCallback+0xa0>
			accumulate_counter -= ENC_MAX_COUNT;
 8000376:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 800037c:	4413      	add	r3, r2
 800037e:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000380:	6013      	str	r3, [r2, #0]
 8000382:	e00a      	b.n	800039a <HAL_I2C_MemRxCpltCallback+0xb6>
		}else if(accumulate_counter < ENC_MIN_COUNT){
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 800038a:	4293      	cmp	r3, r2
 800038c:	da05      	bge.n	800039a <HAL_I2C_MemRxCpltCallback+0xb6>
			accumulate_counter += ENC_MAX_COUNT;
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8000394:	4413      	add	r3, r2
 8000396:	4a08      	ldr	r2, [pc, #32]	@ (80003b8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000398:	6013      	str	r3, [r2, #0]
		}

        position_prev = position_now;
 800039a:	4a05      	ldr	r2, [pc, #20]	@ (80003b0 <HAL_I2C_MemRxCpltCallback+0xcc>)
 800039c:	897b      	ldrh	r3, [r7, #10]
 800039e:	8013      	strh	r3, [r2, #0]
    }
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40005400 	.word	0x40005400
 80003ac:	20000084 	.word	0x20000084
 80003b0:	2000007e 	.word	0x2000007e
 80003b4:	2000007c 	.word	0x2000007c
 80003b8:	20000080 	.word	0x20000080
 80003bc:	0098967e 	.word	0x0098967e
 80003c0:	ff676981 	.word	0xff676981
 80003c4:	0098967f 	.word	0x0098967f

080003c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	4a06      	ldr	r2, [pc, #24]	@ (80003f0 <vApplicationGetIdleTaskMemory+0x28>)
 80003d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80003de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2280      	movs	r2, #128	@ 0x80
 80003e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003e6:	bf00      	nop
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	2000088c 	.word	0x2000088c
 80003f4:	2000092c 	.word	0x2000092c

080003f8 <i2c_scanbus>:


#include "i2c_bus.h"

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= MAX_NODE ; i++){
 8000402:	2300      	movs	r3, #0
 8000404:	73fb      	strb	r3, [r7, #15]
 8000406:	e020      	b.n	800044a <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 100);
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	b29b      	uxth	r3, r3
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	b299      	uxth	r1, r3
 8000410:	2364      	movs	r3, #100	@ 0x64
 8000412:	2201      	movs	r2, #1
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f001 fd09 	bl	8001e2c <HAL_I2C_IsDeviceReady>
 800041a:	4603      	mov	r3, r0
 800041c:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10c      	bne.n	800043e <i2c_scanbus+0x46>
			found_addr[counter] = i;
 8000424:	4b0d      	ldr	r3, [pc, #52]	@ (800045c <i2c_scanbus+0x64>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	461a      	mov	r2, r3
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	4413      	add	r3, r2
 800042e:	7bfa      	ldrb	r2, [r7, #15]
 8000430:	701a      	strb	r2, [r3, #0]
			counter++;
 8000432:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <i2c_scanbus+0x64>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	3301      	adds	r3, #1
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b08      	ldr	r3, [pc, #32]	@ (800045c <i2c_scanbus+0x64>)
 800043c:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 800043e:	200a      	movs	r0, #10
 8000440:	f000 fcc8 	bl	8000dd4 <HAL_Delay>
	for(uint8_t i = 0 ; i <= MAX_NODE ; i++){
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	3301      	adds	r3, #1
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044e:	2b00      	cmp	r3, #0
 8000450:	dada      	bge.n	8000408 <i2c_scanbus+0x10>
	}
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000b2c 	.word	0x20000b2c

08000460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000460:	b5b0      	push	{r4, r5, r7, lr}
 8000462:	b096      	sub	sp, #88	@ 0x58
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000466:	f000 fc83 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046a:	f000 f859 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046e:	f000 f96b 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 8000472:	f000 f94b 	bl	800070c <MX_DMA_Init>
  MX_I2C1_Init();
 8000476:	f000 f899 	bl	80005ac <MX_I2C1_Init>
  MX_TIM2_Init();
 800047a:	f000 f8c5 	bl	8000608 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800047e:	f000 f91b 	bl	80006b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanbus(&hi2c1, i2c_available);
 8000482:	491f      	ldr	r1, [pc, #124]	@ (8000500 <main+0xa0>)
 8000484:	481f      	ldr	r0, [pc, #124]	@ (8000504 <main+0xa4>)
 8000486:	f7ff ffb7 	bl	80003f8 <i2c_scanbus>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800048a:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <main+0xa8>)
 800048c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000490:	461d      	mov	r5, r3
 8000492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000496:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800049a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800049e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f005 ff1b 	bl	80062e0 <osThreadCreate>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a17      	ldr	r2, [pc, #92]	@ (800050c <main+0xac>)
 80004ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 80004b0:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <main+0xb0>)
 80004b2:	f107 0420 	add.w	r4, r7, #32
 80004b6:	461d      	mov	r5, r3
 80004b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 80004c4:	f107 0320 	add.w	r3, r7, #32
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f005 ff08 	bl	80062e0 <osThreadCreate>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <main+0xb4>)
 80004d4:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <main+0xb8>)
 80004d8:	1d3c      	adds	r4, r7, #4
 80004da:	461d      	mov	r5, r3
 80004dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f005 fef7 	bl	80062e0 <osThreadCreate>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a09      	ldr	r2, [pc, #36]	@ (800051c <main+0xbc>)
 80004f6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004f8:	f005 feeb 	bl	80062d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <main+0x9c>
 8000500:	20000c64 	.word	0x20000c64
 8000504:	20000b30 	.word	0x20000b30
 8000508:	080078bc 	.word	0x080078bc
 800050c:	20000c58 	.word	0x20000c58
 8000510:	080078e4 	.word	0x080078e4
 8000514:	20000c5c 	.word	0x20000c5c
 8000518:	0800790c 	.word	0x0800790c
 800051c:	20000c60 	.word	0x20000c60

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b090      	sub	sp, #64	@ 0x40
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	2228      	movs	r2, #40	@ 0x28
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 f8da 	bl	80076e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000542:	2301      	movs	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000546:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800054a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000554:	2302      	movs	r3, #2
 8000556:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fde5 	bl	8004138 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000574:	f000 f9b2 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2302      	movs	r3, #2
 800057e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2102      	movs	r1, #2
 8000592:	4618      	mov	r0, r3
 8000594:	f004 f852 	bl	800463c <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059e:	f000 f99d 	bl	80008dc <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3740      	adds	r7, #64	@ 0x40
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005b2:	4a13      	ldr	r2, [pc, #76]	@ (8000600 <MX_I2C1_Init+0x54>)
 80005b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005b8:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <MX_I2C1_Init+0x58>)
 80005ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e8:	4804      	ldr	r0, [pc, #16]	@ (80005fc <MX_I2C1_Init+0x50>)
 80005ea:	f001 f941 	bl	8001870 <HAL_I2C_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f4:	f000 f972 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000b30 	.word	0x20000b30
 8000600:	40005400 	.word	0x40005400
 8000604:	00061a80 	.word	0x00061a80

08000608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800062a:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <MX_TIM2_Init+0xac>)
 800062c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000630:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <MX_TIM2_Init+0xac>)
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <MX_TIM2_Init+0xac>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_TIM2_Init+0xac>)
 8000640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_TIM2_Init+0xac>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <MX_TIM2_Init+0xac>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000652:	4818      	ldr	r0, [pc, #96]	@ (80006b4 <MX_TIM2_Init+0xac>)
 8000654:	f004 fa5a 	bl	8004b0c <HAL_TIM_OC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800065e:	f000 f93d 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4619      	mov	r1, r3
 8000670:	4810      	ldr	r0, [pc, #64]	@ (80006b4 <MX_TIM2_Init+0xac>)
 8000672:	f004 fe01 	bl	8005278 <HAL_TIMEx_MasterConfigSynchronization>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800067c:	f000 f92e 	bl	80008dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000680:	2350      	movs	r3, #80	@ 0x50
 8000682:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	4619      	mov	r1, r3
 8000696:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <MX_TIM2_Init+0xac>)
 8000698:	f004 fb78 	bl	8004d8c <HAL_TIM_OC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80006a2:	f000 f91b 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006a6:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <MX_TIM2_Init+0xac>)
 80006a8:	f000 f9ec 	bl	8000a84 <HAL_TIM_MspPostInit>

}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	@ 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000bc8 	.word	0x20000bc8

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_USART1_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f004 fe32 	bl	8005358 <HAL_HalfDuplex_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f8ef 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000c10 	.word	0x20000c10
 8000708:	40013800 	.word	0x40013800

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_DMA_Init+0x38>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <MX_DMA_Init+0x38>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_DMA_Init+0x38>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2105      	movs	r1, #5
 800072e:	2011      	movs	r0, #17
 8000730:	f000 fc29 	bl	8000f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000734:	2011      	movs	r0, #17
 8000736:	f000 fc42 	bl	8000fbe <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075c:	4b3d      	ldr	r3, [pc, #244]	@ (8000854 <MX_GPIO_Init+0x10c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a3c      	ldr	r2, [pc, #240]	@ (8000854 <MX_GPIO_Init+0x10c>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b3a      	ldr	r3, [pc, #232]	@ (8000854 <MX_GPIO_Init+0x10c>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0310 	and.w	r3, r3, #16
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000774:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <MX_GPIO_Init+0x10c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a36      	ldr	r2, [pc, #216]	@ (8000854 <MX_GPIO_Init+0x10c>)
 800077a:	f043 0320 	orr.w	r3, r3, #32
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b34      	ldr	r3, [pc, #208]	@ (8000854 <MX_GPIO_Init+0x10c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0320 	and.w	r3, r3, #32
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b31      	ldr	r3, [pc, #196]	@ (8000854 <MX_GPIO_Init+0x10c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a30      	ldr	r2, [pc, #192]	@ (8000854 <MX_GPIO_Init+0x10c>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <MX_GPIO_Init+0x10c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <MX_GPIO_Init+0x10c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a2a      	ldr	r2, [pc, #168]	@ (8000854 <MX_GPIO_Init+0x10c>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <MX_GPIO_Init+0x10c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c2:	4825      	ldr	r0, [pc, #148]	@ (8000858 <MX_GPIO_Init+0x110>)
 80007c4:	f001 f83c 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2106      	movs	r1, #6
 80007cc:	4823      	ldr	r0, [pc, #140]	@ (800085c <MX_GPIO_Init+0x114>)
 80007ce:	f001 f837 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	4822      	ldr	r0, [pc, #136]	@ (8000860 <MX_GPIO_Init+0x118>)
 80007d8:	f001 f832 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	4818      	ldr	r0, [pc, #96]	@ (8000858 <MX_GPIO_Init+0x110>)
 80007f6:	f000 fe9f 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80007fa:	2306      	movs	r3, #6
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2302      	movs	r3, #2
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	4812      	ldr	r0, [pc, #72]	@ (800085c <MX_GPIO_Init+0x114>)
 8000812:	f000 fe91 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000816:	2310      	movs	r3, #16
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <MX_GPIO_Init+0x118>)
 800082a:	f000 fe85 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800082e:	2320      	movs	r3, #32
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2302      	movs	r3, #2
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4619      	mov	r1, r3
 8000844:	4806      	ldr	r0, [pc, #24]	@ (8000860 <MX_GPIO_Init+0x118>)
 8000846:	f000 fe77 	bl	8001538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	40011000 	.word	0x40011000
 800085c:	40010800 	.word	0x40010800
 8000860:	40010c00 	.word	0x40010c00

08000864 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	for(;;){
		DRV_ReadRegister(0x00, &driver_value);
 800086c:	4902      	ldr	r1, [pc, #8]	@ (8000878 <StartDriverTask+0x14>)
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff fc6e 	bl	8000150 <DRV_ReadRegister>
 8000874:	e7fa      	b.n	800086c <StartDriverTask+0x8>
 8000876:	bf00      	nop
 8000878:	20000cec 	.word	0x20000cec

0800087c <StartEncoderTask>:
	}
}

void StartEncoderTask(void const * argument){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	for(;;){
		encChangeDir(motor_rotation);
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <StartEncoderTask+0x24>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fca5 	bl	80001d8 <encChangeDir>
		encRead();
 800088e:	f7ff fcc7 	bl	8000220 <encRead>
		encoder_counter = getCounter();
 8000892:	f7ff fcd9 	bl	8000248 <getCounter>
 8000896:	4603      	mov	r3, r0
 8000898:	4a02      	ldr	r2, [pc, #8]	@ (80008a4 <StartEncoderTask+0x28>)
 800089a:	6013      	str	r3, [r2, #0]
		encChangeDir(motor_rotation);
 800089c:	bf00      	nop
 800089e:	e7f1      	b.n	8000884 <StartEncoderTask+0x8>
 80008a0:	20000ce8 	.word	0x20000ce8
 80008a4:	20000ce4 	.word	0x20000ce4

080008a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f005 fd61 	bl	8006378 <osDelay>
 80008b6:	e7fb      	b.n	80008b0 <StartDefaultTask+0x8>

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 fa67 	bl	8000d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40012c00 	.word	0x40012c00

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ee:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <HAL_MspInit+0x68>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a17      	ldr	r2, [pc, #92]	@ (8000950 <HAL_MspInit+0x68>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <HAL_MspInit+0x68>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <HAL_MspInit+0x68>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <HAL_MspInit+0x68>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <HAL_MspInit+0x68>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fb2e 	bl	8000f86 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_MspInit+0x6c>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <HAL_MspInit+0x6c>)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	40010000 	.word	0x40010000

08000958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a31      	ldr	r2, [pc, #196]	@ (8000a38 <HAL_I2C_MspInit+0xe0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d15a      	bne.n	8000a2e <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <HAL_I2C_MspInit+0xe4>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a3c <HAL_I2C_MspInit+0xe4>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <HAL_I2C_MspInit+0xe4>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000990:	23c0      	movs	r3, #192	@ 0xc0
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000994:	2312      	movs	r3, #18
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4827      	ldr	r0, [pc, #156]	@ (8000a40 <HAL_I2C_MspInit+0xe8>)
 80009a4:	f000 fdc8 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a8:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <HAL_I2C_MspInit+0xe4>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	4a23      	ldr	r2, [pc, #140]	@ (8000a3c <HAL_I2C_MspInit+0xe4>)
 80009ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009b2:	61d3      	str	r3, [r2, #28]
 80009b4:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <HAL_I2C_MspInit+0xe4>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80009c0:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009c2:	4a21      	ldr	r2, [pc, #132]	@ (8000a48 <HAL_I2C_MspInit+0xf0>)
 80009c4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009de:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80009f2:	4814      	ldr	r0, [pc, #80]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 80009f4:	f000 faf2 	bl	8000fdc <HAL_DMA_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80009fe:	f7ff ff6d 	bl	80008dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 8000a06:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a08:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <HAL_I2C_MspInit+0xec>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2105      	movs	r1, #5
 8000a12:	201f      	movs	r0, #31
 8000a14:	f000 fab7 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a18:	201f      	movs	r0, #31
 8000a1a:	f000 fad0 	bl	8000fbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2105      	movs	r1, #5
 8000a22:	2020      	movs	r0, #32
 8000a24:	f000 faaf 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a28:	2020      	movs	r0, #32
 8000a2a:	f000 fac8 	bl	8000fbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010c00 	.word	0x40010c00
 8000a44:	20000b84 	.word	0x20000b84
 8000a48:	40020080 	.word	0x40020080

08000a4c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a5c:	d10b      	bne.n	8000a76 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <HAL_TIM_OC_MspInit+0x34>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <HAL_TIM_OC_MspInit+0x34>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <HAL_TIM_OC_MspInit+0x34>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa2:	d117      	bne.n	8000ad4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_TIM_MspPostInit+0x58>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000adc <HAL_TIM_MspPostInit+0x58>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <HAL_TIM_MspPostInit+0x58>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000abc:	2301      	movs	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <HAL_TIM_MspPostInit+0x5c>)
 8000ad0:	f000 fd32 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a1a      	ldr	r2, [pc, #104]	@ (8000b68 <HAL_UART_MspInit+0x84>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d12c      	bne.n	8000b5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a18      	ldr	r2, [pc, #96]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a12      	ldr	r2, [pc, #72]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <HAL_UART_MspInit+0x8c>)
 8000b4a:	f000 fcf5 	bl	8001538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2105      	movs	r1, #5
 8000b52:	2025      	movs	r0, #37	@ 0x25
 8000b54:	f000 fa17 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b58:	2025      	movs	r0, #37	@ 0x25
 8000b5a:	f000 fa30 	bl	8000fbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40013800 	.word	0x40013800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010800 	.word	0x40010800

08000b74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	@ 0x30
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c44 <HAL_InitTick+0xd0>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c44 <HAL_InitTick+0xd0>)
 8000b90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b2b      	ldr	r3, [pc, #172]	@ (8000c44 <HAL_InitTick+0xd0>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba2:	f107 020c 	add.w	r2, r7, #12
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 feb5 	bl	800491c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bb2:	f003 fe9f 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 8000bb6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bba:	4a23      	ldr	r2, [pc, #140]	@ (8000c48 <HAL_InitTick+0xd4>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	0c9b      	lsrs	r3, r3, #18
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <HAL_InitTick+0xd8>)
 8000bc8:	4a21      	ldr	r2, [pc, #132]	@ (8000c50 <HAL_InitTick+0xdc>)
 8000bca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <HAL_InitTick+0xd8>)
 8000bce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c4c <HAL_InitTick+0xd8>)
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <HAL_InitTick+0xd8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <HAL_InitTick+0xd8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <HAL_InitTick+0xd8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bec:	4817      	ldr	r0, [pc, #92]	@ (8000c4c <HAL_InitTick+0xd8>)
 8000bee:	f003 fee3 	bl	80049b8 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d11b      	bne.n	8000c38 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c00:	4812      	ldr	r0, [pc, #72]	@ (8000c4c <HAL_InitTick+0xd8>)
 8000c02:	f003 ff31 	bl	8004a68 <HAL_TIM_Base_Start_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d111      	bne.n	8000c38 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c14:	2019      	movs	r0, #25
 8000c16:	f000 f9d2 	bl	8000fbe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d808      	bhi.n	8000c32 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	2019      	movs	r0, #25
 8000c26:	f000 f9ae 	bl	8000f86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <HAL_InitTick+0xe0>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e002      	b.n	8000c38 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3730      	adds	r7, #48	@ 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	431bde83 	.word	0x431bde83
 8000c4c:	20000cf0 	.word	0x20000cf0
 8000c50:	40012c00 	.word	0x40012c00
 8000c54:	20000004 	.word	0x20000004

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c90:	4802      	ldr	r0, [pc, #8]	@ (8000c9c <DMA1_Channel7_IRQHandler+0x10>)
 8000c92:	f000 fb11 	bl	80012b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000b84 	.word	0x20000b84

08000ca0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <TIM1_UP_IRQHandler+0x10>)
 8000ca6:	f003 ff80 	bl	8004baa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000cf0 	.word	0x20000cf0

08000cb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <I2C1_EV_IRQHandler+0x10>)
 8000cba:	f001 f9e5 	bl	8002088 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000b30 	.word	0x20000b30

08000cc8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <I2C1_ER_IRQHandler+0x10>)
 8000cce:	f001 fb2e 	bl	800232e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000b30 	.word	0x20000b30

08000cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <USART1_IRQHandler+0x10>)
 8000ce2:	f004 fd11 	bl	8005708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000c10 	.word	0x20000c10

08000cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000d08:	221e      	movs	r2, #30
 8000d0a:	4904      	ldr	r1, [pc, #16]	@ (8000d1c <HAL_UARTEx_RxEventCallback+0x20>)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <HAL_UARTEx_RxEventCallback+0x24>)
 8000d0e:	f004 fc9d 	bl	800564c <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000d38 	.word	0x20000d38
 8000d20:	20000c10 	.word	0x20000c10

08000d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d24:	f7ff ffe4 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d2a:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d40:	4c09      	ldr	r4, [pc, #36]	@ (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f006 fd29 	bl	80077a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d52:	f7ff fb85 	bl	8000460 <main>
  bx lr
 8000d56:	4770      	bx	lr
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d60:	08007964 	.word	0x08007964
  ldr r2, =_sbss
 8000d64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d68:	20001bf0 	.word	0x20001bf0

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_Init+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_Init+0x28>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f8f5 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff fef4 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fdac 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a03      	ldr	r2, [pc, #12]	@ (8000dbc <HAL_IncTick+0x20>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000d58 	.word	0x20000d58

08000dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	@ (8000dd0 <HAL_GetTick+0x10>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	20000d58 	.word	0x20000d58

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff fff0 	bl	8000dc0 <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffe0 	bl	8000dc0 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4906      	ldr	r1, [pc, #24]	@ (8000eb4 <__NVIC_EnableIRQ+0x34>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	@ (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	@ (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	@ 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff4f 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff64 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ffb2 	bl	8000f0c <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff81 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff57 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e043      	b.n	800107a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <HAL_DMA_Init+0xa8>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a22      	ldr	r2, [pc, #136]	@ (8001088 <HAL_DMA_Init+0xac>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	009a      	lsls	r2, r3, #2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a1f      	ldr	r2, [pc, #124]	@ (800108c <HAL_DMA_Init+0xb0>)
 800100e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2202      	movs	r2, #2
 8001014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001026:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800102a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	bffdfff8 	.word	0xbffdfff8
 8001088:	cccccccd 	.word	0xcccccccd
 800108c:	40020000 	.word	0x40020000

08001090 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_DMA_Start_IT+0x20>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e04b      	b.n	8001148 <HAL_DMA_Start_IT+0xb8>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d13a      	bne.n	800113a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f9f8 	bl	80014de <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 020e 	orr.w	r2, r2, #14
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e00f      	b.n	8001128 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0204 	bic.w	r2, r2, #4
 8001116:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 020a 	orr.w	r2, r2, #10
 8001126:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e005      	b.n	8001146 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001142:	2302      	movs	r3, #2
 8001144:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001146:	7dfb      	ldrb	r3, [r7, #23]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d008      	beq.n	800117a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e020      	b.n	80011bc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 020e 	bic.w	r2, r2, #14
 8001188:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0201 	bic.w	r2, r2, #1
 8001198:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d005      	beq.n	80011ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2204      	movs	r2, #4
 80011e4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e051      	b.n	8001290 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 020e 	bic.w	r2, r2, #14
 80011fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a22      	ldr	r2, [pc, #136]	@ (800129c <HAL_DMA_Abort_IT+0xd4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d029      	beq.n	800126a <HAL_DMA_Abort_IT+0xa2>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a21      	ldr	r2, [pc, #132]	@ (80012a0 <HAL_DMA_Abort_IT+0xd8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d022      	beq.n	8001266 <HAL_DMA_Abort_IT+0x9e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <HAL_DMA_Abort_IT+0xdc>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01a      	beq.n	8001260 <HAL_DMA_Abort_IT+0x98>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1e      	ldr	r2, [pc, #120]	@ (80012a8 <HAL_DMA_Abort_IT+0xe0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d012      	beq.n	800125a <HAL_DMA_Abort_IT+0x92>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <HAL_DMA_Abort_IT+0xe4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00a      	beq.n	8001254 <HAL_DMA_Abort_IT+0x8c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <HAL_DMA_Abort_IT+0xe8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d102      	bne.n	800124e <HAL_DMA_Abort_IT+0x86>
 8001248:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800124c:	e00e      	b.n	800126c <HAL_DMA_Abort_IT+0xa4>
 800124e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001252:	e00b      	b.n	800126c <HAL_DMA_Abort_IT+0xa4>
 8001254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001258:	e008      	b.n	800126c <HAL_DMA_Abort_IT+0xa4>
 800125a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125e:	e005      	b.n	800126c <HAL_DMA_Abort_IT+0xa4>
 8001260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001264:	e002      	b.n	800126c <HAL_DMA_Abort_IT+0xa4>
 8001266:	2310      	movs	r3, #16
 8001268:	e000      	b.n	800126c <HAL_DMA_Abort_IT+0xa4>
 800126a:	2301      	movs	r3, #1
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <HAL_DMA_Abort_IT+0xec>)
 800126e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
    } 
  }
  return status;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020008 	.word	0x40020008
 80012a0:	4002001c 	.word	0x4002001c
 80012a4:	40020030 	.word	0x40020030
 80012a8:	40020044 	.word	0x40020044
 80012ac:	40020058 	.word	0x40020058
 80012b0:	4002006c 	.word	0x4002006c
 80012b4:	40020000 	.word	0x40020000

080012b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	2204      	movs	r2, #4
 80012d6:	409a      	lsls	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d04f      	beq.n	8001380 <HAL_DMA_IRQHandler+0xc8>
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d04a      	beq.n	8001380 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d107      	bne.n	8001308 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0204 	bic.w	r2, r2, #4
 8001306:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a66      	ldr	r2, [pc, #408]	@ (80014a8 <HAL_DMA_IRQHandler+0x1f0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d029      	beq.n	8001366 <HAL_DMA_IRQHandler+0xae>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a65      	ldr	r2, [pc, #404]	@ (80014ac <HAL_DMA_IRQHandler+0x1f4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d022      	beq.n	8001362 <HAL_DMA_IRQHandler+0xaa>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a63      	ldr	r2, [pc, #396]	@ (80014b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d01a      	beq.n	800135c <HAL_DMA_IRQHandler+0xa4>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a62      	ldr	r2, [pc, #392]	@ (80014b4 <HAL_DMA_IRQHandler+0x1fc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d012      	beq.n	8001356 <HAL_DMA_IRQHandler+0x9e>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a60      	ldr	r2, [pc, #384]	@ (80014b8 <HAL_DMA_IRQHandler+0x200>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00a      	beq.n	8001350 <HAL_DMA_IRQHandler+0x98>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5f      	ldr	r2, [pc, #380]	@ (80014bc <HAL_DMA_IRQHandler+0x204>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d102      	bne.n	800134a <HAL_DMA_IRQHandler+0x92>
 8001344:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001348:	e00e      	b.n	8001368 <HAL_DMA_IRQHandler+0xb0>
 800134a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800134e:	e00b      	b.n	8001368 <HAL_DMA_IRQHandler+0xb0>
 8001350:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001354:	e008      	b.n	8001368 <HAL_DMA_IRQHandler+0xb0>
 8001356:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800135a:	e005      	b.n	8001368 <HAL_DMA_IRQHandler+0xb0>
 800135c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001360:	e002      	b.n	8001368 <HAL_DMA_IRQHandler+0xb0>
 8001362:	2340      	movs	r3, #64	@ 0x40
 8001364:	e000      	b.n	8001368 <HAL_DMA_IRQHandler+0xb0>
 8001366:	2304      	movs	r3, #4
 8001368:	4a55      	ldr	r2, [pc, #340]	@ (80014c0 <HAL_DMA_IRQHandler+0x208>)
 800136a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8094 	beq.w	800149e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800137e:	e08e      	b.n	800149e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	2202      	movs	r2, #2
 8001386:	409a      	lsls	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d056      	beq.n	800143e <HAL_DMA_IRQHandler+0x186>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d051      	beq.n	800143e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10b      	bne.n	80013c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 020a 	bic.w	r2, r2, #10
 80013b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a38      	ldr	r2, [pc, #224]	@ (80014a8 <HAL_DMA_IRQHandler+0x1f0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d029      	beq.n	800141e <HAL_DMA_IRQHandler+0x166>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a37      	ldr	r2, [pc, #220]	@ (80014ac <HAL_DMA_IRQHandler+0x1f4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d022      	beq.n	800141a <HAL_DMA_IRQHandler+0x162>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a35      	ldr	r2, [pc, #212]	@ (80014b0 <HAL_DMA_IRQHandler+0x1f8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01a      	beq.n	8001414 <HAL_DMA_IRQHandler+0x15c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a34      	ldr	r2, [pc, #208]	@ (80014b4 <HAL_DMA_IRQHandler+0x1fc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d012      	beq.n	800140e <HAL_DMA_IRQHandler+0x156>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a32      	ldr	r2, [pc, #200]	@ (80014b8 <HAL_DMA_IRQHandler+0x200>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00a      	beq.n	8001408 <HAL_DMA_IRQHandler+0x150>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a31      	ldr	r2, [pc, #196]	@ (80014bc <HAL_DMA_IRQHandler+0x204>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d102      	bne.n	8001402 <HAL_DMA_IRQHandler+0x14a>
 80013fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001400:	e00e      	b.n	8001420 <HAL_DMA_IRQHandler+0x168>
 8001402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001406:	e00b      	b.n	8001420 <HAL_DMA_IRQHandler+0x168>
 8001408:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800140c:	e008      	b.n	8001420 <HAL_DMA_IRQHandler+0x168>
 800140e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001412:	e005      	b.n	8001420 <HAL_DMA_IRQHandler+0x168>
 8001414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001418:	e002      	b.n	8001420 <HAL_DMA_IRQHandler+0x168>
 800141a:	2320      	movs	r3, #32
 800141c:	e000      	b.n	8001420 <HAL_DMA_IRQHandler+0x168>
 800141e:	2302      	movs	r3, #2
 8001420:	4a27      	ldr	r2, [pc, #156]	@ (80014c0 <HAL_DMA_IRQHandler+0x208>)
 8001422:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	d034      	beq.n	800149e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800143c:	e02f      	b.n	800149e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	2208      	movs	r2, #8
 8001444:	409a      	lsls	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d028      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x1e8>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d023      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 020e 	bic.w	r2, r2, #14
 8001466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001470:	2101      	movs	r1, #1
 8001472:	fa01 f202 	lsl.w	r2, r1, r2
 8001476:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	4798      	blx	r3
    }
  }
  return;
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
}
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020008 	.word	0x40020008
 80014ac:	4002001c 	.word	0x4002001c
 80014b0:	40020030 	.word	0x40020030
 80014b4:	40020044 	.word	0x40020044
 80014b8:	40020058 	.word	0x40020058
 80014bc:	4002006c 	.word	0x4002006c
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014de:	b480      	push	{r7}
 80014e0:	b085      	sub	sp, #20
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d108      	bne.n	800151e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800151c:	e007      	b.n	800152e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	60da      	str	r2, [r3, #12]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b08b      	sub	sp, #44	@ 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154a:	e169      	b.n	8001820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800154c:	2201      	movs	r2, #1
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	429a      	cmp	r2, r3
 8001566:	f040 8158 	bne.w	800181a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4a9a      	ldr	r2, [pc, #616]	@ (80017d8 <HAL_GPIO_Init+0x2a0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d05e      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001574:	4a98      	ldr	r2, [pc, #608]	@ (80017d8 <HAL_GPIO_Init+0x2a0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d875      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 800157a:	4a98      	ldr	r2, [pc, #608]	@ (80017dc <HAL_GPIO_Init+0x2a4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d058      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001580:	4a96      	ldr	r2, [pc, #600]	@ (80017dc <HAL_GPIO_Init+0x2a4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d86f      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 8001586:	4a96      	ldr	r2, [pc, #600]	@ (80017e0 <HAL_GPIO_Init+0x2a8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d052      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 800158c:	4a94      	ldr	r2, [pc, #592]	@ (80017e0 <HAL_GPIO_Init+0x2a8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d869      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 8001592:	4a94      	ldr	r2, [pc, #592]	@ (80017e4 <HAL_GPIO_Init+0x2ac>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d04c      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 8001598:	4a92      	ldr	r2, [pc, #584]	@ (80017e4 <HAL_GPIO_Init+0x2ac>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d863      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 800159e:	4a92      	ldr	r2, [pc, #584]	@ (80017e8 <HAL_GPIO_Init+0x2b0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d046      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
 80015a4:	4a90      	ldr	r2, [pc, #576]	@ (80017e8 <HAL_GPIO_Init+0x2b0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d85d      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 80015aa:	2b12      	cmp	r3, #18
 80015ac:	d82a      	bhi.n	8001604 <HAL_GPIO_Init+0xcc>
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d859      	bhi.n	8001666 <HAL_GPIO_Init+0x12e>
 80015b2:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <HAL_GPIO_Init+0x80>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	08001633 	.word	0x08001633
 80015bc:	0800160d 	.word	0x0800160d
 80015c0:	0800161f 	.word	0x0800161f
 80015c4:	08001661 	.word	0x08001661
 80015c8:	08001667 	.word	0x08001667
 80015cc:	08001667 	.word	0x08001667
 80015d0:	08001667 	.word	0x08001667
 80015d4:	08001667 	.word	0x08001667
 80015d8:	08001667 	.word	0x08001667
 80015dc:	08001667 	.word	0x08001667
 80015e0:	08001667 	.word	0x08001667
 80015e4:	08001667 	.word	0x08001667
 80015e8:	08001667 	.word	0x08001667
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001667 	.word	0x08001667
 80015f4:	08001667 	.word	0x08001667
 80015f8:	08001667 	.word	0x08001667
 80015fc:	08001615 	.word	0x08001615
 8001600:	08001629 	.word	0x08001629
 8001604:	4a79      	ldr	r2, [pc, #484]	@ (80017ec <HAL_GPIO_Init+0x2b4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800160a:	e02c      	b.n	8001666 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e029      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	3304      	adds	r3, #4
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e024      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	3308      	adds	r3, #8
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e01f      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	330c      	adds	r3, #12
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e01a      	b.n	8001668 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800163a:	2304      	movs	r3, #4
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e013      	b.n	8001668 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001648:	2308      	movs	r3, #8
 800164a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	611a      	str	r2, [r3, #16]
          break;
 8001652:	e009      	b.n	8001668 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001654:	2308      	movs	r3, #8
 8001656:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	615a      	str	r2, [r3, #20]
          break;
 800165e:	e003      	b.n	8001668 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x130>
          break;
 8001666:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2bff      	cmp	r3, #255	@ 0xff
 800166c:	d801      	bhi.n	8001672 <HAL_GPIO_Init+0x13a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_Init+0x13e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3304      	adds	r3, #4
 8001676:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2bff      	cmp	r3, #255	@ 0xff
 800167c:	d802      	bhi.n	8001684 <HAL_GPIO_Init+0x14c>
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	e002      	b.n	800168a <HAL_GPIO_Init+0x152>
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	3b08      	subs	r3, #8
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	210f      	movs	r1, #15
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	401a      	ands	r2, r3
 800169c:	6a39      	ldr	r1, [r7, #32]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80b1 	beq.w	800181a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b8:	4b4d      	ldr	r3, [pc, #308]	@ (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a4c      	ldr	r2, [pc, #304]	@ (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <HAL_GPIO_Init+0x2b8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d0:	4a48      	ldr	r2, [pc, #288]	@ (80017f4 <HAL_GPIO_Init+0x2bc>)
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a40      	ldr	r2, [pc, #256]	@ (80017f8 <HAL_GPIO_Init+0x2c0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d013      	beq.n	8001724 <HAL_GPIO_Init+0x1ec>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <HAL_GPIO_Init+0x2c4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d00d      	beq.n	8001720 <HAL_GPIO_Init+0x1e8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3e      	ldr	r2, [pc, #248]	@ (8001800 <HAL_GPIO_Init+0x2c8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d007      	beq.n	800171c <HAL_GPIO_Init+0x1e4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3d      	ldr	r2, [pc, #244]	@ (8001804 <HAL_GPIO_Init+0x2cc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d101      	bne.n	8001718 <HAL_GPIO_Init+0x1e0>
 8001714:	2303      	movs	r3, #3
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001718:	2304      	movs	r3, #4
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x1ee>
 8001724:	2300      	movs	r3, #0
 8001726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001736:	492f      	ldr	r1, [pc, #188]	@ (80017f4 <HAL_GPIO_Init+0x2bc>)
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	492c      	ldr	r1, [pc, #176]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4928      	ldr	r1, [pc, #160]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001768:	4013      	ands	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	4922      	ldr	r1, [pc, #136]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	43db      	mvns	r3, r3
 800178e:	491e      	ldr	r1, [pc, #120]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 8001790:	4013      	ands	r3, r2
 8001792:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4918      	ldr	r1, [pc, #96]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4914      	ldr	r1, [pc, #80]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	490e      	ldr	r1, [pc, #56]	@ (8001808 <HAL_GPIO_Init+0x2d0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e021      	b.n	800181a <HAL_GPIO_Init+0x2e2>
 80017d6:	bf00      	nop
 80017d8:	10320000 	.word	0x10320000
 80017dc:	10310000 	.word	0x10310000
 80017e0:	10220000 	.word	0x10220000
 80017e4:	10210000 	.word	0x10210000
 80017e8:	10120000 	.word	0x10120000
 80017ec:	10110000 	.word	0x10110000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40011000 	.word	0x40011000
 8001804:	40011400 	.word	0x40011400
 8001808:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_GPIO_Init+0x304>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	43db      	mvns	r3, r3
 8001814:	4909      	ldr	r1, [pc, #36]	@ (800183c <HAL_GPIO_Init+0x304>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	3301      	adds	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	f47f ae8e 	bne.w	800154c <HAL_GPIO_Init+0x14>
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	372c      	adds	r7, #44	@ 0x2c
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
 800184c:	4613      	mov	r3, r2
 800184e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001850:	787b      	ldrb	r3, [r7, #1]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800185c:	e003      	b.n	8001866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	041a      	lsls	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	611a      	str	r2, [r3, #16]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e12b      	b.n	8001ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff f85e 	bl	8000958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2224      	movs	r2, #36	@ 0x24
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018d4:	f002 fffa 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80018d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a81      	ldr	r2, [pc, #516]	@ (8001ae4 <HAL_I2C_Init+0x274>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d807      	bhi.n	80018f4 <HAL_I2C_Init+0x84>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a80      	ldr	r2, [pc, #512]	@ (8001ae8 <HAL_I2C_Init+0x278>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf94      	ite	ls
 80018ec:	2301      	movls	r3, #1
 80018ee:	2300      	movhi	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	e006      	b.n	8001902 <HAL_I2C_Init+0x92>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a7d      	ldr	r2, [pc, #500]	@ (8001aec <HAL_I2C_Init+0x27c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0e7      	b.n	8001ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4a78      	ldr	r2, [pc, #480]	@ (8001af0 <HAL_I2C_Init+0x280>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae4 <HAL_I2C_Init+0x274>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d802      	bhi.n	8001944 <HAL_I2C_Init+0xd4>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3301      	adds	r3, #1
 8001942:	e009      	b.n	8001958 <HAL_I2C_Init+0xe8>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	4a69      	ldr	r2, [pc, #420]	@ (8001af4 <HAL_I2C_Init+0x284>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	3301      	adds	r3, #1
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800196a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	495c      	ldr	r1, [pc, #368]	@ (8001ae4 <HAL_I2C_Init+0x274>)
 8001974:	428b      	cmp	r3, r1
 8001976:	d819      	bhi.n	80019ac <HAL_I2C_Init+0x13c>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e59      	subs	r1, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fbb1 f3f3 	udiv	r3, r1, r3
 8001986:	1c59      	adds	r1, r3, #1
 8001988:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800198c:	400b      	ands	r3, r1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <HAL_I2C_Init+0x138>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1e59      	subs	r1, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a6:	e051      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e04f      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <HAL_I2C_Init+0x168>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	440b      	add	r3, r1
 80019c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	e012      	b.n	80019fe <HAL_I2C_Init+0x18e>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	0099      	lsls	r1, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Init+0x196>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e022      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10e      	bne.n	8001a2c <HAL_I2C_Init+0x1bc>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e58      	subs	r0, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	440b      	add	r3, r1
 8001a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a2a:	e00f      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	0099      	lsls	r1, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	6809      	ldr	r1, [r1, #0]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6911      	ldr	r1, [r2, #16]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68d2      	ldr	r2, [r2, #12]
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	000186a0 	.word	0x000186a0
 8001ae8:	001e847f 	.word	0x001e847f
 8001aec:	003d08ff 	.word	0x003d08ff
 8001af0:	431bde83 	.word	0x431bde83
 8001af4:	10624dd3 	.word	0x10624dd3

08001af8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	2b80      	cmp	r3, #128	@ 0x80
 8001b0c:	d103      	bne.n	8001b16 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	@ 0x30
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	817b      	strh	r3, [r7, #10]
 8001b32:	460b      	mov	r3, r1
 8001b34:	813b      	strh	r3, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b3a:	f7ff f941 	bl	8000dc0 <HAL_GetTick>
 8001b3e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	f040 8168 	bne.w	8001e22 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b52:	4b98      	ldr	r3, [pc, #608]	@ (8001db4 <HAL_I2C_Mem_Read_DMA+0x294>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	4a97      	ldr	r2, [pc, #604]	@ (8001db8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0a1a      	lsrs	r2, r3, #8
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009a      	lsls	r2, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d112      	bne.n	8001b9e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2220      	movs	r2, #32
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f043 0220 	orr.w	r2, r3, #32
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e142      	b.n	8001e24 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d0df      	beq.n	8001b6c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_I2C_Mem_Read_DMA+0x9a>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e134      	b.n	8001e24 <HAL_I2C_Mem_Read_DMA+0x304>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d007      	beq.n	8001be0 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2222      	movs	r2, #34	@ 0x22
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2240      	movs	r2, #64	@ 0x40
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a67      	ldr	r2, [pc, #412]	@ (8001dbc <HAL_I2C_Mem_Read_DMA+0x29c>)
 8001c20:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001c22:	897a      	ldrh	r2, [r7, #10]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001c28:	893a      	ldrh	r2, [r7, #8]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001c2e:	88fa      	ldrh	r2, [r7, #6]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80c2 	beq.w	8001dc8 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d024      	beq.n	8001c96 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c50:	4a5b      	ldr	r2, [pc, #364]	@ (8001dc0 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c58:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc4 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8001c5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c60:	2200      	movs	r2, #0
 8001c62:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c68:	2200      	movs	r2, #0
 8001c6a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3310      	adds	r3, #16
 8001c76:	4619      	mov	r1, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c82:	f7ff fa05 	bl	8001090 <HAL_DMA_Start_IT>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d17b      	bne.n	8001d8c <HAL_I2C_Mem_Read_DMA+0x26c>
 8001c94:	e013      	b.n	8001cbe <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0b2      	b.n	8001e24 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001cbe:	88f8      	ldrh	r0, [r7, #6]
 8001cc0:	893a      	ldrh	r2, [r7, #8]
 8001cc2:	8979      	ldrh	r1, [r7, #10]
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	2323      	movs	r3, #35	@ 0x23
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f001 fdb0 	bl	8003834 <I2C_RequestMemoryRead>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d023      	beq.n	8001d22 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa72 	bl	80011c8 <HAL_DMA_Abort_IT>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cee:	2200      	movs	r2, #0
 8001cf0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d00:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e080      	b.n	8001e24 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e007      	b.n	8001d4c <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d78:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	e048      	b.n	8001e1e <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f043 0210 	orr.w	r2, r3, #16
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e037      	b.n	8001e24 <HAL_I2C_Mem_Read_DMA+0x304>
 8001db4:	20000000 	.word	0x20000000
 8001db8:	14f8b589 	.word	0x14f8b589
 8001dbc:	ffff0000 	.word	0xffff0000
 8001dc0:	08003a05 	.word	0x08003a05
 8001dc4:	08003bc3 	.word	0x08003bc3
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001dc8:	88f8      	ldrh	r0, [r7, #6]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	8979      	ldrh	r1, [r7, #10]
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	2323      	movs	r3, #35	@ 0x23
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f001 fd2b 	bl	8003834 <I2C_RequestMemoryRead>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e01d      	b.n	8001e24 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e0c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3728      	adds	r7, #40	@ 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	@ 0x28
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7fe ffc0 	bl	8000dc0 <HAL_GetTick>
 8001e40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	f040 8111 	bne.w	8002076 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2319      	movs	r3, #25
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4988      	ldr	r1, [pc, #544]	@ (8002080 <HAL_I2C_IsDeviceReady+0x254>)
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f001 ff8e 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e104      	b.n	8002078 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_I2C_IsDeviceReady+0x50>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e0fd      	b.n	8002078 <HAL_I2C_IsDeviceReady+0x24c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d007      	beq.n	8001ea2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2224      	movs	r2, #36	@ 0x24
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a70      	ldr	r2, [pc, #448]	@ (8002084 <HAL_I2C_IsDeviceReady+0x258>)
 8001ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ed4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f001 ff4c 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00d      	beq.n	8001f0a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001efc:	d103      	bne.n	8001f06 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f04:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e0b6      	b.n	8002078 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f18:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe ff51 	bl	8000dc0 <HAL_GetTick>
 8001f1e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f4e:	e025      	b.n	8001f9c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f50:	f7fe ff36 	bl	8000dc0 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d302      	bcc.n	8001f66 <HAL_I2C_IsDeviceReady+0x13a>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	22a0      	movs	r2, #160	@ 0xa0
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_I2C_IsDeviceReady+0x188>
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_I2C_IsDeviceReady+0x188>
 8001fae:	7dbb      	ldrb	r3, [r7, #22]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0cd      	beq.n	8001f50 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d129      	bne.n	800201e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4921      	ldr	r1, [pc, #132]	@ (8002080 <HAL_I2C_IsDeviceReady+0x254>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f001 fec0 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e036      	b.n	8002078 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e02c      	b.n	8002078 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800202c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002036:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2319      	movs	r3, #25
 800203e:	2201      	movs	r2, #1
 8002040:	490f      	ldr	r1, [pc, #60]	@ (8002080 <HAL_I2C_IsDeviceReady+0x254>)
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f001 fe9c 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e012      	b.n	8002078 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3301      	adds	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	f4ff af32 	bcc.w	8001ec6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002076:	2302      	movs	r3, #2
  }
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	00100002 	.word	0x00100002
 8002084:	ffff0000 	.word	0xffff0000

08002088 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d003      	beq.n	80020c0 <HAL_I2C_EV_IRQHandler+0x38>
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b40      	cmp	r3, #64	@ 0x40
 80020bc:	f040 80b1 	bne.w	8002222 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80020e0:	d003      	beq.n	80020ea <HAL_I2C_EV_IRQHandler+0x62>
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80020e8:	d101      	bne.n	80020ee <HAL_I2C_EV_IRQHandler+0x66>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_I2C_EV_IRQHandler+0x68>
 80020ee:	2300      	movs	r3, #0
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	f000 8114 	beq.w	800231e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00b      	beq.n	8002118 <HAL_I2C_EV_IRQHandler+0x90>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f001 fffa 	bl	8004104 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fd6b 	bl	8002bec <I2C_Master_SB>
 8002116:	e083      	b.n	8002220 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_I2C_EV_IRQHandler+0xac>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fde2 	bl	8002cf6 <I2C_Master_ADD10>
 8002132:	e075      	b.n	8002220 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_I2C_EV_IRQHandler+0xc8>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fdfd 	bl	8002d48 <I2C_Master_ADDR>
 800214e:	e067      	b.n	8002220 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d036      	beq.n	80021c8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002168:	f000 80db 	beq.w	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <HAL_I2C_EV_IRQHandler+0x10a>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_I2C_EV_IRQHandler+0x10a>
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f9cb 	bl	8002526 <I2C_MasterTransmit_TXE>
 8002190:	e046      	b.n	8002220 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80c2 	beq.w	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80bc 	beq.w	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80021aa:	7bbb      	ldrb	r3, [r7, #14]
 80021ac:	2b21      	cmp	r3, #33	@ 0x21
 80021ae:	d103      	bne.n	80021b8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fa54 	bl	800265e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021b6:	e0b4      	b.n	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	2b40      	cmp	r3, #64	@ 0x40
 80021bc:	f040 80b1 	bne.w	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fac2 	bl	800274a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c6:	e0ac      	b.n	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021d6:	f000 80a4 	beq.w	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <HAL_I2C_EV_IRQHandler+0x178>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_I2C_EV_IRQHandler+0x178>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d103      	bne.n	8002200 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb3e 	bl	800287a <I2C_MasterReceive_RXNE>
 80021fe:	e00f      	b.n	8002220 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 808b 	beq.w	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8085 	beq.w	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fbf6 	bl	8002a0a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221e:	e080      	b.n	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
 8002220:	e07f      	b.n	8002322 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e007      	b.n	8002244 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d011      	beq.n	8002272 <HAL_I2C_EV_IRQHandler+0x1ea>
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002268:	69b9      	ldr	r1, [r7, #24]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 ffc3 	bl	80031f6 <I2C_Slave_ADDR>
 8002270:	e05a      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_I2C_EV_IRQHandler+0x206>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fffe 	bl	8003288 <I2C_Slave_STOPF>
 800228c:	e04c      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800228e:	7bbb      	ldrb	r3, [r7, #14]
 8002290:	2b21      	cmp	r3, #33	@ 0x21
 8002292:	d002      	beq.n	800229a <HAL_I2C_EV_IRQHandler+0x212>
 8002294:	7bbb      	ldrb	r3, [r7, #14]
 8002296:	2b29      	cmp	r3, #41	@ 0x29
 8002298:	d120      	bne.n	80022dc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_I2C_EV_IRQHandler+0x238>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_I2C_EV_IRQHandler+0x238>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fee0 	bl	800307e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022be:	e032      	b.n	8002326 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02d      	beq.n	8002326 <HAL_I2C_EV_IRQHandler+0x29e>
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d028      	beq.n	8002326 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 ff0f 	bl	80030f8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022da:	e024      	b.n	8002326 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <HAL_I2C_EV_IRQHandler+0x27a>
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_I2C_EV_IRQHandler+0x27a>
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 ff1c 	bl	8003138 <I2C_SlaveReceive_RXNE>
 8002300:	e012      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <HAL_I2C_EV_IRQHandler+0x2a0>
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 ff4c 	bl	80031b4 <I2C_SlaveReceive_BTF>
 800231c:	e004      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800231e:	bf00      	nop
 8002320:	e002      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002322:	bf00      	nop
 8002324:	e000      	b.n	8002328 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002326:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b08a      	sub	sp, #40	@ 0x28
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002350:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <HAL_I2C_ER_IRQHandler+0x5a>
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002376:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002386:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <HAL_I2C_ER_IRQHandler+0x80>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80023ac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03e      	beq.n	8002436 <HAL_I2C_ER_IRQHandler+0x108>
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d039      	beq.n	8002436 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80023c2:	7efb      	ldrb	r3, [r7, #27]
 80023c4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80023dc:	7ebb      	ldrb	r3, [r7, #26]
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d112      	bne.n	8002408 <HAL_I2C_ER_IRQHandler+0xda>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10f      	bne.n	8002408 <HAL_I2C_ER_IRQHandler+0xda>
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b21      	cmp	r3, #33	@ 0x21
 80023ec:	d008      	beq.n	8002400 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	2b29      	cmp	r3, #41	@ 0x29
 80023f2:	d005      	beq.n	8002400 <HAL_I2C_ER_IRQHandler+0xd2>
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b28      	cmp	r3, #40	@ 0x28
 80023f8:	d106      	bne.n	8002408 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b21      	cmp	r3, #33	@ 0x21
 80023fe:	d103      	bne.n	8002408 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f001 f871 	bl	80034e8 <I2C_Slave_AF>
 8002406:	e016      	b.n	8002436 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002410:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800241a:	7efb      	ldrb	r3, [r7, #27]
 800241c:	2b10      	cmp	r3, #16
 800241e:	d002      	beq.n	8002426 <HAL_I2C_ER_IRQHandler+0xf8>
 8002420:	7efb      	ldrb	r3, [r7, #27]
 8002422:	2b40      	cmp	r3, #64	@ 0x40
 8002424:	d107      	bne.n	8002436 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002434:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <HAL_I2C_ER_IRQHandler+0x12e>
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800245a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f001 f8ae 	bl	80035d0 <I2C_ITError>
  }
}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	@ 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
 80024d0:	4613      	mov	r3, r2
 80024d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002534:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800253c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002542:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d150      	bne.n	80025ee <I2C_MasterTransmit_TXE+0xc8>
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b21      	cmp	r3, #33	@ 0x21
 8002550:	d14d      	bne.n	80025ee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d01d      	beq.n	8002594 <I2C_MasterTransmit_TXE+0x6e>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b20      	cmp	r3, #32
 800255c:	d01a      	beq.n	8002594 <I2C_MasterTransmit_TXE+0x6e>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002564:	d016      	beq.n	8002594 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002574:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2211      	movs	r2, #17
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff75 	bl	800247c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002592:	e060      	b.n	8002656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025a2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b40      	cmp	r3, #64	@ 0x40
 80025cc:	d107      	bne.n	80025de <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ff8a 	bl	80024f0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025dc:	e03b      	b.n	8002656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff48 	bl	800247c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025ec:	e033      	b.n	8002656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b21      	cmp	r3, #33	@ 0x21
 80025f2:	d005      	beq.n	8002600 <I2C_MasterTransmit_TXE+0xda>
 80025f4:	7bbb      	ldrb	r3, [r7, #14]
 80025f6:	2b40      	cmp	r3, #64	@ 0x40
 80025f8:	d12d      	bne.n	8002656 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b22      	cmp	r3, #34	@ 0x22
 80025fe:	d12a      	bne.n	8002656 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d108      	bne.n	800261c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002618:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800261a:	e01c      	b.n	8002656 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b40      	cmp	r3, #64	@ 0x40
 8002626:	d103      	bne.n	8002630 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f88e 	bl	800274a <I2C_MemoryTransmit_TXE_BTF>
}
 800262e:	e012      	b.n	8002656 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002654:	e7ff      	b.n	8002656 <I2C_MasterTransmit_TXE+0x130>
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b21      	cmp	r3, #33	@ 0x21
 8002676:	d164      	bne.n	8002742 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d012      	beq.n	80026a8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80026a6:	e04c      	b.n	8002742 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d01d      	beq.n	80026ea <I2C_MasterTransmit_BTF+0x8c>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d01a      	beq.n	80026ea <I2C_MasterTransmit_BTF+0x8c>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ba:	d016      	beq.n	80026ea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026ca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2211      	movs	r2, #17
 80026d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff feca 	bl	800247c <HAL_I2C_MasterTxCpltCallback>
}
 80026e8:	e02b      	b.n	8002742 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026f8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002708:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b40      	cmp	r3, #64	@ 0x40
 8002722:	d107      	bne.n	8002734 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fedf 	bl	80024f0 <HAL_I2C_MemTxCpltCallback>
}
 8002732:	e006      	b.n	8002742 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fe9d 	bl	800247c <HAL_I2C_MasterTxCpltCallback>
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002758:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11d      	bne.n	800279e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10b      	bne.n	8002782 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276e:	b2da      	uxtb	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800277a:	1c9a      	adds	r2, r3, #2
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002780:	e077      	b.n	8002872 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002786:	b29b      	uxth	r3, r3
 8002788:	121b      	asrs	r3, r3, #8
 800278a:	b2da      	uxtb	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800279c:	e069      	b.n	8002872 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10b      	bne.n	80027be <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027bc:	e059      	b.n	8002872 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d152      	bne.n	800286c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b22      	cmp	r3, #34	@ 0x22
 80027ca:	d10d      	bne.n	80027e8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027da:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027e6:	e044      	b.n	8002872 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b21      	cmp	r3, #33	@ 0x21
 80027f6:	d112      	bne.n	800281e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800281c:	e029      	b.n	8002872 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d124      	bne.n	8002872 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b21      	cmp	r3, #33	@ 0x21
 800282c:	d121      	bne.n	8002872 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800283c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fe43 	bl	80024f0 <HAL_I2C_MemTxCpltCallback>
}
 800286a:	e002      	b.n	8002872 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff f943 	bl	8001af8 <I2C_Flush_DR>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b22      	cmp	r3, #34	@ 0x22
 800288c:	f040 80b9 	bne.w	8002a02 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002894:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d921      	bls.n	80028e8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	f040 8096 	bne.w	8002a02 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80028e6:	e08c      	b.n	8002a02 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d07f      	beq.n	80029f0 <I2C_MasterReceive_RXNE+0x176>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d002      	beq.n	80028fc <I2C_MasterReceive_RXNE+0x82>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d179      	bne.n	80029f0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f001 fba1 	bl	8004044 <I2C_WaitOnSTOPRequestThroughIT>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d14c      	bne.n	80029a2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002916:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002926:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b40      	cmp	r3, #64	@ 0x40
 8002960:	d10a      	bne.n	8002978 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fd fcb7 	bl	80002e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002976:	e044      	b.n	8002a02 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b08      	cmp	r3, #8
 8002984:	d002      	beq.n	800298c <I2C_MasterReceive_RXNE+0x112>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b20      	cmp	r3, #32
 800298a:	d103      	bne.n	8002994 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30
 8002992:	e002      	b.n	800299a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2212      	movs	r2, #18
 8002998:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fd77 	bl	800248e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029a0:	e02f      	b.n	8002a02 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fd8a 	bl	8002502 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029ee:	e008      	b.n	8002a02 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029fe:	605a      	str	r2, [r3, #4]
}
 8002a00:	e7ff      	b.n	8002a02 <I2C_MasterReceive_RXNE+0x188>
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d11b      	bne.n	8002a5a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a30:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002a58:	e0c4      	b.n	8002be4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d129      	bne.n	8002ab8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a72:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00a      	beq.n	8002a90 <I2C_MasterReceive_BTF+0x86>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d007      	beq.n	8002a90 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002ab6:	e095      	b.n	8002be4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d17d      	bne.n	8002bbe <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d002      	beq.n	8002ace <I2C_MasterReceive_BTF+0xc4>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d108      	bne.n	8002ae0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e016      	b.n	8002b0e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <I2C_MasterReceive_BTF+0xe2>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d108      	bne.n	8002afe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e007      	b.n	8002b0e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b68:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b40      	cmp	r3, #64	@ 0x40
 8002b7c:	d10a      	bne.n	8002b94 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fd fba9 	bl	80002e4 <HAL_I2C_MemRxCpltCallback>
}
 8002b92:	e027      	b.n	8002be4 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d002      	beq.n	8002ba8 <I2C_MasterReceive_BTF+0x19e>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d103      	bne.n	8002bb0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bae:	e002      	b.n	8002bb6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2212      	movs	r2, #18
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fc69 	bl	800248e <HAL_I2C_MasterRxCpltCallback>
}
 8002bbc:	e012      	b.n	8002be4 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b40      	cmp	r3, #64	@ 0x40
 8002bfe:	d117      	bne.n	8002c30 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c18:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002c1a:	e067      	b.n	8002cec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	611a      	str	r2, [r3, #16]
}
 8002c2e:	e05d      	b.n	8002cec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c38:	d133      	bne.n	8002ca2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b21      	cmp	r3, #33	@ 0x21
 8002c44:	d109      	bne.n	8002c5a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c56:	611a      	str	r2, [r3, #16]
 8002c58:	e008      	b.n	8002c6c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <I2C_Master_SB+0x92>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d108      	bne.n	8002c90 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d032      	beq.n	8002cec <I2C_Master_SB+0x100>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02d      	beq.n	8002cec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c9e:	605a      	str	r2, [r3, #4]
}
 8002ca0:	e024      	b.n	8002cec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10e      	bne.n	8002cc8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	11db      	asrs	r3, r3, #7
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f003 0306 	and.w	r3, r3, #6
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f063 030f 	orn	r3, r3, #15
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]
}
 8002cc6:	e011      	b.n	8002cec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10d      	bne.n	8002cec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	11db      	asrs	r3, r3, #7
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 0306 	and.w	r3, r3, #6
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f063 030e 	orn	r3, r3, #14
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <I2C_Master_ADD10+0x26>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d108      	bne.n	8002d2e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <I2C_Master_ADD10+0x48>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d3c:	605a      	str	r2, [r3, #4]
  }
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b091      	sub	sp, #68	@ 0x44
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b22      	cmp	r3, #34	@ 0x22
 8002d70:	f040 8174 	bne.w	800305c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <I2C_Master_ADDR+0x54>
 8002d7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d80:	2b40      	cmp	r3, #64	@ 0x40
 8002d82:	d10b      	bne.n	8002d9c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	e16b      	b.n	8003074 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11d      	bne.n	8002de0 <I2C_Master_ADDR+0x98>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002dac:	d118      	bne.n	8002de0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	651a      	str	r2, [r3, #80]	@ 0x50
 8002dde:	e149      	b.n	8003074 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d113      	bne.n	8002e12 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e120      	b.n	8003054 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	f040 808a 	bne.w	8002f32 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e24:	d137      	bne.n	8002e96 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e34:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e44:	d113      	bne.n	8002e6e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e54:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	e0f2      	b.n	8003054 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e0de      	b.n	8003054 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d02e      	beq.n	8002efa <I2C_Master_ADDR+0x1b2>
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d02b      	beq.n	8002efa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea4:	2b12      	cmp	r3, #18
 8002ea6:	d102      	bne.n	8002eae <I2C_Master_ADDR+0x166>
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d125      	bne.n	8002efa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d00e      	beq.n	8002ed2 <I2C_Master_ADDR+0x18a>
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d00b      	beq.n	8002ed2 <I2C_Master_ADDR+0x18a>
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d008      	beq.n	8002ed2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e007      	b.n	8002ee2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ee0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	e0ac      	b.n	8003054 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f08:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e090      	b.n	8003054 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d158      	bne.n	8002fee <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d021      	beq.n	8002f86 <I2C_Master_ADDR+0x23e>
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d01e      	beq.n	8002f86 <I2C_Master_ADDR+0x23e>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d01b      	beq.n	8002f86 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e012      	b.n	8002fac <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f94:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fba:	d14b      	bne.n	8003054 <I2C_Master_ADDR+0x30c>
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fc2:	d00b      	beq.n	8002fdc <I2C_Master_ADDR+0x294>
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d008      	beq.n	8002fdc <I2C_Master_ADDR+0x294>
 8002fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d005      	beq.n	8002fdc <I2C_Master_ADDR+0x294>
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d002      	beq.n	8002fdc <I2C_Master_ADDR+0x294>
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d13b      	bne.n	8003054 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	e032      	b.n	8003054 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ffc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800300c:	d117      	bne.n	800303e <I2C_Master_ADDR+0x2f6>
 800300e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003010:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003014:	d00b      	beq.n	800302e <I2C_Master_ADDR+0x2e6>
 8003016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003018:	2b01      	cmp	r3, #1
 800301a:	d008      	beq.n	800302e <I2C_Master_ADDR+0x2e6>
 800301c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301e:	2b08      	cmp	r3, #8
 8003020:	d005      	beq.n	800302e <I2C_Master_ADDR+0x2e6>
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	2b10      	cmp	r3, #16
 8003026:	d002      	beq.n	800302e <I2C_Master_ADDR+0x2e6>
 8003028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302a:	2b20      	cmp	r3, #32
 800302c:	d107      	bne.n	800303e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800303c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800305a:	e00b      	b.n	8003074 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
}
 8003072:	e7ff      	b.n	8003074 <I2C_Master_ADDR+0x32c>
 8003074:	bf00      	nop
 8003076:	3744      	adds	r7, #68	@ 0x44
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02b      	beq.n	80030f0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d114      	bne.n	80030f0 <I2C_SlaveTransmit_TXE+0x72>
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	2b29      	cmp	r3, #41	@ 0x29
 80030ca:	d111      	bne.n	80030f0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2221      	movs	r2, #33	@ 0x21
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2228      	movs	r2, #40	@ 0x28
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff f9d8 	bl	80024a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003146:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02c      	beq.n	80031ac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d114      	bne.n	80031ac <I2C_SlaveReceive_RXNE+0x74>
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b2a      	cmp	r3, #42	@ 0x2a
 8003186:	d111      	bne.n	80031ac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003196:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2222      	movs	r2, #34	@ 0x22
 800319c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2228      	movs	r2, #40	@ 0x28
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff f983 	bl	80024b2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003210:	2b28      	cmp	r3, #40	@ 0x28
 8003212:	d125      	bne.n	8003260 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003222:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	81bb      	strh	r3, [r7, #12]
 8003242:	e002      	b.n	800324a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003252:	89ba      	ldrh	r2, [r7, #12]
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff f933 	bl	80024c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800325e:	e00e      	b.n	800327e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003296:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032e4:	d172      	bne.n	80033cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b22      	cmp	r3, #34	@ 0x22
 80032ea:	d002      	beq.n	80032f2 <I2C_Slave_STOPF+0x6a>
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80032f0:	d135      	bne.n	800335e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003324:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe f8ca 	bl	80014c4 <HAL_DMA_GetState>
 8003330:	4603      	mov	r3, r0
 8003332:	2b01      	cmp	r3, #1
 8003334:	d049      	beq.n	80033ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333a:	4a69      	ldr	r2, [pc, #420]	@ (80034e0 <I2C_Slave_STOPF+0x258>)
 800333c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd ff40 	bl	80011c8 <HAL_DMA_Abort_IT>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d03d      	beq.n	80033ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003358:	4610      	mov	r0, r2
 800335a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800335c:	e035      	b.n	80033ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f043 0204 	orr.w	r2, r3, #4
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003390:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe f894 	bl	80014c4 <HAL_DMA_GetState>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d014      	beq.n	80033cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a6:	4a4e      	ldr	r2, [pc, #312]	@ (80034e0 <I2C_Slave_STOPF+0x258>)
 80033a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd ff0a 	bl	80011c8 <HAL_DMA_Abort_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033c4:	4610      	mov	r0, r2
 80033c6:	4798      	blx	r3
 80033c8:	e000      	b.n	80033cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d03e      	beq.n	8003454 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d112      	bne.n	800340a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	2b40      	cmp	r3, #64	@ 0x40
 8003416:	d112      	bne.n	800343e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f043 0204 	orr.w	r2, r3, #4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8b7 	bl	80035d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003462:	e039      	b.n	80034d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b2a      	cmp	r3, #42	@ 0x2a
 8003468:	d109      	bne.n	800347e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2228      	movs	r2, #40	@ 0x28
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff f81a 	bl	80024b2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b28      	cmp	r3, #40	@ 0x28
 8003488:	d111      	bne.n	80034ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a15      	ldr	r2, [pc, #84]	@ (80034e4 <I2C_Slave_STOPF+0x25c>)
 800348e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff f819 	bl	80024de <HAL_I2C_ListenCpltCallback>
}
 80034ac:	e014      	b.n	80034d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	2b22      	cmp	r3, #34	@ 0x22
 80034b4:	d002      	beq.n	80034bc <I2C_Slave_STOPF+0x234>
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b22      	cmp	r3, #34	@ 0x22
 80034ba:	d10d      	bne.n	80034d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe ffed 	bl	80024b2 <HAL_I2C_SlaveRxCpltCallback>
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	08003c31 	.word	0x08003c31
 80034e4:	ffff0000 	.word	0xffff0000

080034e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d002      	beq.n	800350a <I2C_Slave_AF+0x22>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b20      	cmp	r3, #32
 8003508:	d129      	bne.n	800355e <I2C_Slave_AF+0x76>
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b28      	cmp	r3, #40	@ 0x28
 800350e:	d126      	bne.n	800355e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <I2C_Slave_AF+0xe4>)
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003524:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800352e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe ffc1 	bl	80024de <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800355c:	e031      	b.n	80035c2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b21      	cmp	r3, #33	@ 0x21
 8003562:	d129      	bne.n	80035b8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <I2C_Slave_AF+0xe4>)
 8003568:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2221      	movs	r2, #33	@ 0x21
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800358e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003598:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe faa4 	bl	8001af8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fe ff75 	bl	80024a0 <HAL_I2C_SlaveTxCpltCallback>
}
 80035b6:	e004      	b.n	80035c2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035c0:	615a      	str	r2, [r3, #20]
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	ffff0000 	.word	0xffff0000

080035d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035e8:	7bbb      	ldrb	r3, [r7, #14]
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d002      	beq.n	80035f4 <I2C_ITError+0x24>
 80035ee:	7bbb      	ldrb	r3, [r7, #14]
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d10a      	bne.n	800360a <I2C_ITError+0x3a>
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b22      	cmp	r3, #34	@ 0x22
 80035f8:	d107      	bne.n	800360a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003608:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003610:	2b28      	cmp	r3, #40	@ 0x28
 8003612:	d107      	bne.n	8003624 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2228      	movs	r2, #40	@ 0x28
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003622:	e015      	b.n	8003650 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003632:	d00a      	beq.n	800364a <I2C_ITError+0x7a>
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b60      	cmp	r3, #96	@ 0x60
 8003638:	d007      	beq.n	800364a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800365e:	d162      	bne.n	8003726 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003674:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d020      	beq.n	80036c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003682:	4a6a      	ldr	r2, [pc, #424]	@ (800382c <I2C_ITError+0x25c>)
 8003684:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fd9c 	bl	80011c8 <HAL_DMA_Abort_IT>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8089 	beq.w	80037aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036ba:	4610      	mov	r0, r2
 80036bc:	4798      	blx	r3
 80036be:	e074      	b.n	80037aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	4a59      	ldr	r2, [pc, #356]	@ (800382c <I2C_ITError+0x25c>)
 80036c6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fd7b 	bl	80011c8 <HAL_DMA_Abort_IT>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d068      	beq.n	80037aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e2:	2b40      	cmp	r3, #64	@ 0x40
 80036e4:	d10b      	bne.n	80036fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003720:	4610      	mov	r0, r2
 8003722:	4798      	blx	r3
 8003724:	e041      	b.n	80037aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b60      	cmp	r3, #96	@ 0x60
 8003730:	d125      	bne.n	800377e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374a:	2b40      	cmp	r3, #64	@ 0x40
 800374c:	d10b      	bne.n	8003766 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe fecc 	bl	8002514 <HAL_I2C_AbortCpltCallback>
 800377c:	e015      	b.n	80037aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003788:	2b40      	cmp	r3, #64	@ 0x40
 800378a:	d10b      	bne.n	80037a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fe feac 	bl	8002502 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10e      	bne.n	80037d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d113      	bne.n	8003824 <I2C_ITError+0x254>
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b28      	cmp	r3, #40	@ 0x28
 8003800:	d110      	bne.n	8003824 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <I2C_ITError+0x260>)
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fe5d 	bl	80024de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	08003c31 	.word	0x08003c31
 8003830:	ffff0000 	.word	0xffff0000

08003834 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	817b      	strh	r3, [r7, #10]
 8003846:	460b      	mov	r3, r1
 8003848:	813b      	strh	r3, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800385c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800386c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	2200      	movs	r2, #0
 8003876:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fa80 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003894:	d103      	bne.n	800389e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0aa      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	4952      	ldr	r1, [pc, #328]	@ (8003a00 <I2C_RequestMemoryRead+0x1cc>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fadb 	bl	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e097      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e0:	6a39      	ldr	r1, [r7, #32]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fb66 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e076      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003910:	893b      	ldrh	r3, [r7, #8]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]
 800391a:	e021      	b.n	8003960 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	b29b      	uxth	r3, r3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	6a39      	ldr	r1, [r7, #32]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fb40 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	2b04      	cmp	r3, #4
 8003940:	d107      	bne.n	8003952 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e050      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003956:	893b      	ldrh	r3, [r7, #8]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003962:	6a39      	ldr	r1, [r7, #32]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fb25 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	2b04      	cmp	r3, #4
 8003976:	d107      	bne.n	8003988 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003986:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e035      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800399a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f9e9 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c2:	d103      	bne.n	80039cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e013      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	6a3a      	ldr	r2, [r7, #32]
 80039e4:	4906      	ldr	r1, [pc, #24]	@ (8003a00 <I2C_RequestMemoryRead+0x1cc>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fa44 	bl	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	00010002 	.word	0x00010002

08003a04 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a18:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a20:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a36:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a44:	2200      	movs	r2, #0
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	2200      	movs	r2, #0
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003a5e:	2b21      	cmp	r3, #33	@ 0x21
 8003a60:	d007      	beq.n	8003a72 <I2C_DMAXferCplt+0x6e>
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003a68:	2b22      	cmp	r3, #34	@ 0x22
 8003a6a:	d131      	bne.n	8003ad0 <I2C_DMAXferCplt+0xcc>
 8003a6c:	7cbb      	ldrb	r3, [r7, #18]
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d12e      	bne.n	8003ad0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a80:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	2b29      	cmp	r3, #41	@ 0x29
 8003a8c:	d10a      	bne.n	8003aa4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2221      	movs	r2, #33	@ 0x21
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2228      	movs	r2, #40	@ 0x28
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f7fe fcff 	bl	80024a0 <HAL_I2C_SlaveTxCpltCallback>
 8003aa2:	e00c      	b.n	8003abe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aa8:	d109      	bne.n	8003abe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2222      	movs	r2, #34	@ 0x22
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2228      	movs	r2, #40	@ 0x28
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ab8:	6978      	ldr	r0, [r7, #20]
 8003aba:	f7fe fcfa 	bl	80024b2 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003acc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ace:	e074      	b.n	8003bba <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d06e      	beq.n	8003bba <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003af4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b0c:	d009      	beq.n	8003b22 <I2C_DMAXferCplt+0x11e>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d006      	beq.n	8003b22 <I2C_DMAXferCplt+0x11e>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003b1a:	d002      	beq.n	8003b22 <I2C_DMAXferCplt+0x11e>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d107      	bne.n	8003b32 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b30:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b40:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b50:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003b60:	6978      	ldr	r0, [r7, #20]
 8003b62:	f7fe fcce 	bl	8002502 <HAL_I2C_ErrorCallback>
}
 8003b66:	e028      	b.n	8003bba <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d10a      	bne.n	8003b92 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7fc fbaa 	bl	80002e4 <HAL_I2C_MemRxCpltCallback>
}
 8003b90:	e013      	b.n	8003bba <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d002      	beq.n	8003ba6 <I2C_DMAXferCplt+0x1a2>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d103      	bne.n	8003bae <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bac:	e002      	b.n	8003bb4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2212      	movs	r2, #18
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bb4:	6978      	ldr	r0, [r7, #20]
 8003bb6:	f7fe fc6a 	bl	800248e <HAL_I2C_MasterRxCpltCallback>
}
 8003bba:	bf00      	nop
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bdc:	2200      	movs	r2, #0
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	2200      	movs	r2, #0
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfe:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f043 0210 	orr.w	r2, r3, #16
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7fe fc6d 	bl	8002502 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d78 <I2C_DMAAbort+0x148>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	08db      	lsrs	r3, r3, #3
 8003c50:	4a4a      	ldr	r2, [pc, #296]	@ (8003d7c <I2C_DMAAbort+0x14c>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0a1a      	lsrs	r2, r3, #8
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00da      	lsls	r2, r3, #3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f043 0220 	orr.w	r2, r3, #32
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003c76:	e00a      	b.n	8003c8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c8c:	d0ea      	beq.n	8003c64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	2200      	movs	r2, #0
 8003cac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b60      	cmp	r3, #96	@ 0x60
 8003cfe:	d10e      	bne.n	8003d1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d16:	6978      	ldr	r0, [r7, #20]
 8003d18:	f7fe fbfc 	bl	8002514 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d1c:	e027      	b.n	8003d6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d24:	2b28      	cmp	r3, #40	@ 0x28
 8003d26:	d117      	bne.n	8003d58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2228      	movs	r2, #40	@ 0x28
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d56:	e007      	b.n	8003d68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d68:	6978      	ldr	r0, [r7, #20]
 8003d6a:	f7fe fbca 	bl	8002502 <HAL_I2C_ErrorCallback>
}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	14f8b589 	.word	0x14f8b589

08003d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d90:	e048      	b.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d044      	beq.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9a:	f7fd f811 	bl	8000dc0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d139      	bne.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d10d      	bne.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	e00c      	b.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d116      	bne.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e023      	b.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10d      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	43da      	mvns	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	e00c      	b.n	8003e64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	43da      	mvns	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d093      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e82:	e071      	b.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e92:	d123      	bne.n	8003edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	f043 0204 	orr.w	r2, r3, #4
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e067      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d041      	beq.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7fc ff6c 	bl	8000dc0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d136      	bne.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10c      	bne.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	e00b      	b.n	8003f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e021      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10c      	bne.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e00b      	b.n	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	43da      	mvns	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4013      	ands	r3, r2
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f47f af6d 	bne.w	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc0:	e034      	b.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f870 	bl	80040a8 <I2C_IsAcknowledgeFailed>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e034      	b.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d028      	beq.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fc fef1 	bl	8000dc0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11d      	bne.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b80      	cmp	r3, #128	@ 0x80
 8003ffc:	d016      	beq.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e007      	b.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	2b80      	cmp	r3, #128	@ 0x80
 8004038:	d1c3      	bne.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004050:	4b13      	ldr	r3, [pc, #76]	@ (80040a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	0a1a      	lsrs	r2, r3, #8
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b01      	subs	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e008      	b.n	8004094 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800408c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004090:	d0e9      	beq.n	8004066 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000000 	.word	0x20000000
 80040a4:	14f8b589 	.word	0x14f8b589

080040a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040be:	d11b      	bne.n	80040f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004114:	d103      	bne.n	800411e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800411c:	e007      	b.n	800412e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004126:	d102      	bne.n	800412e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2208      	movs	r2, #8
 800412c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e272      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8087 	beq.w	8004266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004158:	4b92      	ldr	r3, [pc, #584]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b04      	cmp	r3, #4
 8004162:	d00c      	beq.n	800417e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004164:	4b8f      	ldr	r3, [pc, #572]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b08      	cmp	r3, #8
 800416e:	d112      	bne.n	8004196 <HAL_RCC_OscConfig+0x5e>
 8004170:	4b8c      	ldr	r3, [pc, #560]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800417c:	d10b      	bne.n	8004196 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417e:	4b89      	ldr	r3, [pc, #548]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d06c      	beq.n	8004264 <HAL_RCC_OscConfig+0x12c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d168      	bne.n	8004264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e24c      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419e:	d106      	bne.n	80041ae <HAL_RCC_OscConfig+0x76>
 80041a0:	4b80      	ldr	r3, [pc, #512]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7f      	ldr	r2, [pc, #508]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	e02e      	b.n	800420c <HAL_RCC_OscConfig+0xd4>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x98>
 80041b6:	4b7b      	ldr	r3, [pc, #492]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a7a      	ldr	r2, [pc, #488]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	4b78      	ldr	r3, [pc, #480]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a77      	ldr	r2, [pc, #476]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e01d      	b.n	800420c <HAL_RCC_OscConfig+0xd4>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0xbc>
 80041da:	4b72      	ldr	r3, [pc, #456]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a71      	ldr	r2, [pc, #452]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b6f      	ldr	r3, [pc, #444]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6e      	ldr	r2, [pc, #440]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0xd4>
 80041f4:	4b6b      	ldr	r3, [pc, #428]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6a      	ldr	r2, [pc, #424]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b68      	ldr	r3, [pc, #416]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a67      	ldr	r2, [pc, #412]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800420a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fc fdd4 	bl	8000dc0 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421c:	f7fc fdd0 	bl	8000dc0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	@ 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e200      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b5d      	ldr	r3, [pc, #372]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0xe4>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fc fdc0 	bl	8000dc0 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004244:	f7fc fdbc 	bl	8000dc0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	@ 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e1ec      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	4b53      	ldr	r3, [pc, #332]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x10c>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d063      	beq.n	800433a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004272:	4b4c      	ldr	r3, [pc, #304]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800427e:	4b49      	ldr	r3, [pc, #292]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b08      	cmp	r3, #8
 8004288:	d11c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x18c>
 800428a:	4b46      	ldr	r3, [pc, #280]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004296:	4b43      	ldr	r3, [pc, #268]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_RCC_OscConfig+0x176>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e1c0      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ae:	4b3d      	ldr	r3, [pc, #244]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4939      	ldr	r1, [pc, #228]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	e03a      	b.n	800433a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <HAL_RCC_OscConfig+0x270>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fc fd75 	bl	8000dc0 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042da:	f7fc fd71 	bl	8000dc0 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1a1      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b2a      	ldr	r3, [pc, #168]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4927      	ldr	r1, [pc, #156]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
 800430c:	e015      	b.n	800433a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b26      	ldr	r3, [pc, #152]	@ (80043a8 <HAL_RCC_OscConfig+0x270>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fc fd54 	bl	8000dc0 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431c:	f7fc fd50 	bl	8000dc0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e180      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	4b1d      	ldr	r3, [pc, #116]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d03a      	beq.n	80043bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d019      	beq.n	8004382 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434e:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fc fd34 	bl	8000dc0 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435c:	f7fc fd30 	bl	8000dc0 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e160      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <HAL_RCC_OscConfig+0x26c>)
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800437a:	2001      	movs	r0, #1
 800437c:	f000 fafe 	bl	800497c <RCC_Delay>
 8004380:	e01c      	b.n	80043bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004388:	f7fc fd1a 	bl	8000dc0 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800438e:	e00f      	b.n	80043b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004390:	f7fc fd16 	bl	8000dc0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d908      	bls.n	80043b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e146      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	42420000 	.word	0x42420000
 80043ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	4b92      	ldr	r3, [pc, #584]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e9      	bne.n	8004390 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80a6 	beq.w	8004516 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ce:	4b8b      	ldr	r3, [pc, #556]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10d      	bne.n	80043f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	4b88      	ldr	r3, [pc, #544]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	4a87      	ldr	r2, [pc, #540]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80043e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e4:	61d3      	str	r3, [r2, #28]
 80043e6:	4b85      	ldr	r3, [pc, #532]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f2:	2301      	movs	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f6:	4b82      	ldr	r3, [pc, #520]	@ (8004600 <HAL_RCC_OscConfig+0x4c8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d118      	bne.n	8004434 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004402:	4b7f      	ldr	r3, [pc, #508]	@ (8004600 <HAL_RCC_OscConfig+0x4c8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7e      	ldr	r2, [pc, #504]	@ (8004600 <HAL_RCC_OscConfig+0x4c8>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800440c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440e:	f7fc fcd7 	bl	8000dc0 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004416:	f7fc fcd3 	bl	8000dc0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b64      	cmp	r3, #100	@ 0x64
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e103      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	4b75      	ldr	r3, [pc, #468]	@ (8004600 <HAL_RCC_OscConfig+0x4c8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d106      	bne.n	800444a <HAL_RCC_OscConfig+0x312>
 800443c:	4b6f      	ldr	r3, [pc, #444]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4a6e      	ldr	r2, [pc, #440]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6213      	str	r3, [r2, #32]
 8004448:	e02d      	b.n	80044a6 <HAL_RCC_OscConfig+0x36e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10c      	bne.n	800446c <HAL_RCC_OscConfig+0x334>
 8004452:	4b6a      	ldr	r3, [pc, #424]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	4a69      	ldr	r2, [pc, #420]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	6213      	str	r3, [r2, #32]
 800445e:	4b67      	ldr	r3, [pc, #412]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4a66      	ldr	r2, [pc, #408]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004464:	f023 0304 	bic.w	r3, r3, #4
 8004468:	6213      	str	r3, [r2, #32]
 800446a:	e01c      	b.n	80044a6 <HAL_RCC_OscConfig+0x36e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b05      	cmp	r3, #5
 8004472:	d10c      	bne.n	800448e <HAL_RCC_OscConfig+0x356>
 8004474:	4b61      	ldr	r3, [pc, #388]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4a60      	ldr	r2, [pc, #384]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 800447a:	f043 0304 	orr.w	r3, r3, #4
 800447e:	6213      	str	r3, [r2, #32]
 8004480:	4b5e      	ldr	r3, [pc, #376]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4a5d      	ldr	r2, [pc, #372]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6213      	str	r3, [r2, #32]
 800448c:	e00b      	b.n	80044a6 <HAL_RCC_OscConfig+0x36e>
 800448e:	4b5b      	ldr	r3, [pc, #364]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	4a5a      	ldr	r2, [pc, #360]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6213      	str	r3, [r2, #32]
 800449a:	4b58      	ldr	r3, [pc, #352]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	4a57      	ldr	r2, [pc, #348]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d015      	beq.n	80044da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fc fc87 	bl	8000dc0 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fc fc83 	bl	8000dc0 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e0b1      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044cc:	4b4b      	ldr	r3, [pc, #300]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ee      	beq.n	80044b6 <HAL_RCC_OscConfig+0x37e>
 80044d8:	e014      	b.n	8004504 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044da:	f7fc fc71 	bl	8000dc0 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e0:	e00a      	b.n	80044f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fc fc6d 	bl	8000dc0 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e09b      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f8:	4b40      	ldr	r3, [pc, #256]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ee      	bne.n	80044e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d105      	bne.n	8004516 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450a:	4b3c      	ldr	r3, [pc, #240]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	4a3b      	ldr	r2, [pc, #236]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004510:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004514:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8087 	beq.w	800462e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004520:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	2b08      	cmp	r3, #8
 800452a:	d061      	beq.n	80045f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d146      	bne.n	80045c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004534:	4b33      	ldr	r3, [pc, #204]	@ (8004604 <HAL_RCC_OscConfig+0x4cc>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453a:	f7fc fc41 	bl	8000dc0 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004542:	f7fc fc3d 	bl	8000dc0 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e06d      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004554:	4b29      	ldr	r3, [pc, #164]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004568:	d108      	bne.n	800457c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800456a:	4b24      	ldr	r3, [pc, #144]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4921      	ldr	r1, [pc, #132]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800457c:	4b1f      	ldr	r3, [pc, #124]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a19      	ldr	r1, [r3, #32]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	430b      	orrs	r3, r1
 800458e:	491b      	ldr	r1, [pc, #108]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004594:	4b1b      	ldr	r3, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0x4cc>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fc fc11 	bl	8000dc0 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fc fc0d 	bl	8000dc0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e03d      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045b4:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x46a>
 80045c0:	e035      	b.n	800462e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <HAL_RCC_OscConfig+0x4cc>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fc fbfa 	bl	8000dc0 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fc fbf6 	bl	8000dc0 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e026      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e2:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x498>
 80045ee:	e01e      	b.n	800462e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d107      	bne.n	8004608 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e019      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
 8004604:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004608:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <HAL_RCC_OscConfig+0x500>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	429a      	cmp	r2, r3
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d001      	beq.n	800462e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000

0800463c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0d0      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004650:	4b6a      	ldr	r3, [pc, #424]	@ (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d910      	bls.n	8004680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b67      	ldr	r3, [pc, #412]	@ (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 0207 	bic.w	r2, r3, #7
 8004666:	4965      	ldr	r1, [pc, #404]	@ (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b63      	ldr	r3, [pc, #396]	@ (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0b8      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d020      	beq.n	80046ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004698:	4b59      	ldr	r3, [pc, #356]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4a58      	ldr	r2, [pc, #352]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b0:	4b53      	ldr	r3, [pc, #332]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4a52      	ldr	r2, [pc, #328]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80046b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80046ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b50      	ldr	r3, [pc, #320]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	494d      	ldr	r1, [pc, #308]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d040      	beq.n	800475c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d107      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	4b47      	ldr	r3, [pc, #284]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d115      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e07f      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fa:	4b41      	ldr	r3, [pc, #260]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e073      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470a:	4b3d      	ldr	r3, [pc, #244]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e06b      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800471a:	4b39      	ldr	r3, [pc, #228]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f023 0203 	bic.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4936      	ldr	r1, [pc, #216]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	4313      	orrs	r3, r2
 800472a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800472c:	f7fc fb48 	bl	8000dc0 <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	e00a      	b.n	800474a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	f7fc fb44 	bl	8000dc0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e053      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 020c 	and.w	r2, r3, #12
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	429a      	cmp	r2, r3
 800475a:	d1eb      	bne.n	8004734 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800475c:	4b27      	ldr	r3, [pc, #156]	@ (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d210      	bcs.n	800478c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b24      	ldr	r3, [pc, #144]	@ (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 0207 	bic.w	r2, r3, #7
 8004772:	4922      	ldr	r1, [pc, #136]	@ (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477a:	4b20      	ldr	r3, [pc, #128]	@ (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e032      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004798:	4b19      	ldr	r3, [pc, #100]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4916      	ldr	r1, [pc, #88]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047b6:	4b12      	ldr	r3, [pc, #72]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	490e      	ldr	r1, [pc, #56]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ca:	f000 f821 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80047ce:	4602      	mov	r2, r0
 80047d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	490a      	ldr	r1, [pc, #40]	@ (8004804 <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	5ccb      	ldrb	r3, [r1, r3]
 80047de:	fa22 f303 	lsr.w	r3, r2, r3
 80047e2:	4a09      	ldr	r2, [pc, #36]	@ (8004808 <HAL_RCC_ClockConfig+0x1cc>)
 80047e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047e6:	4b09      	ldr	r3, [pc, #36]	@ (800480c <HAL_RCC_ClockConfig+0x1d0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc f9c2 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40022000 	.word	0x40022000
 8004800:	40021000 	.word	0x40021000
 8004804:	08007930 	.word	0x08007930
 8004808:	20000000 	.word	0x20000000
 800480c:	20000004 	.word	0x20000004

08004810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800482a:	4b1e      	ldr	r3, [pc, #120]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b04      	cmp	r3, #4
 8004838:	d002      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x30>
 800483a:	2b08      	cmp	r3, #8
 800483c:	d003      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x36>
 800483e:	e027      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004840:	4b19      	ldr	r3, [pc, #100]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004842:	613b      	str	r3, [r7, #16]
      break;
 8004844:	e027      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	0c9b      	lsrs	r3, r3, #18
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004850:	5cd3      	ldrb	r3, [r2, r3]
 8004852:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d010      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800485e:	4b11      	ldr	r3, [pc, #68]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	0c5b      	lsrs	r3, r3, #17
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	4a11      	ldr	r2, [pc, #68]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a0d      	ldr	r2, [pc, #52]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004872:	fb03 f202 	mul.w	r2, r3, r2
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e004      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a0c      	ldr	r2, [pc, #48]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	613b      	str	r3, [r7, #16]
      break;
 800488e:	e002      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004890:	4b05      	ldr	r3, [pc, #20]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004892:	613b      	str	r3, [r7, #16]
      break;
 8004894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004896:	693b      	ldr	r3, [r7, #16]
}
 8004898:	4618      	mov	r0, r3
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	007a1200 	.word	0x007a1200
 80048ac:	08007948 	.word	0x08007948
 80048b0:	08007958 	.word	0x08007958
 80048b4:	003d0900 	.word	0x003d0900

080048b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048bc:	4b02      	ldr	r3, [pc, #8]	@ (80048c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	20000000 	.word	0x20000000

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d0:	f7ff fff2 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4903      	ldr	r1, [pc, #12]	@ (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	08007940 	.word	0x08007940

080048f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048f8:	f7ff ffde 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	0adb      	lsrs	r3, r3, #11
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	@ (8004918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000
 8004918:	08007940 	.word	0x08007940

0800491c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	220f      	movs	r2, #15
 800492a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800492c:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <HAL_RCC_GetClockConfig+0x58>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0203 	and.w	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004938:	4b0e      	ldr	r3, [pc, #56]	@ (8004974 <HAL_RCC_GetClockConfig+0x58>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004944:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <HAL_RCC_GetClockConfig+0x58>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004950:	4b08      	ldr	r3, [pc, #32]	@ (8004974 <HAL_RCC_GetClockConfig+0x58>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800495e:	4b06      	ldr	r3, [pc, #24]	@ (8004978 <HAL_RCC_GetClockConfig+0x5c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0207 	and.w	r2, r3, #7
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr
 8004974:	40021000 	.word	0x40021000
 8004978:	40022000 	.word	0x40022000

0800497c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004984:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <RCC_Delay+0x34>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a0a      	ldr	r2, [pc, #40]	@ (80049b4 <RCC_Delay+0x38>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	0a5b      	lsrs	r3, r3, #9
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004998:	bf00      	nop
  }
  while (Delay --);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1e5a      	subs	r2, r3, #1
 800499e:	60fa      	str	r2, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f9      	bne.n	8004998 <RCC_Delay+0x1c>
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	20000000 	.word	0x20000000
 80049b4:	10624dd3 	.word	0x10624dd3

080049b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e041      	b.n	8004a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f839 	bl	8004a56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 fa48 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e03a      	b.n	8004af6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <HAL_TIM_Base_Start_IT+0x98>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x58>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x58>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a14      	ldr	r2, [pc, #80]	@ (8004b04 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x58>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a13      	ldr	r2, [pc, #76]	@ (8004b08 <HAL_TIM_Base_Start_IT+0xa0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d111      	bne.n	8004ae4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d010      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	e007      	b.n	8004af4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800

08004b0c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e041      	b.n	8004ba2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fb ff8a 	bl	8000a4c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f000 f99e 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d020      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01b      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f06f 0202 	mvn.w	r2, #2
 8004bde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f92e 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004bfa:	e005      	b.n	8004c08 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f921 	bl	8004e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f930 	bl	8004e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d020      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01b      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f06f 0204 	mvn.w	r2, #4
 8004c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f908 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004c46:	e005      	b.n	8004c54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8fb 	bl	8004e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f90a 	bl	8004e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01b      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f06f 0208 	mvn.w	r2, #8
 8004c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f8e2 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004c92:	e005      	b.n	8004ca0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8d5 	bl	8004e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8e4 	bl	8004e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01b      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f06f 0210 	mvn.w	r2, #16
 8004cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f8bc 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004cde:	e005      	b.n	8004cec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f8af 	bl	8004e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f8be 	bl	8004e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00c      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0201 	mvn.w	r2, #1
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fb fdd1 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fb06 	bl	8005346 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f88e 	bl	8004e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00c      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0220 	mvn.w	r2, #32
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fad9 	bl	8005334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_TIM_OC_ConfigChannel+0x1e>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e048      	b.n	8004e3c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d839      	bhi.n	8004e2c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004db8:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004e2d 	.word	0x08004e2d
 8004dc8:	08004e2d 	.word	0x08004e2d
 8004dcc:	08004e2d 	.word	0x08004e2d
 8004dd0:	08004e03 	.word	0x08004e03
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004e2d 	.word	0x08004e2d
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e2d 	.word	0x08004e2d
 8004de8:	08004e2d 	.word	0x08004e2d
 8004dec:	08004e2d 	.word	0x08004e2d
 8004df0:	08004e1f 	.word	0x08004e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f8b4 	bl	8004f68 <TIM_OC1_SetConfig>
      break;
 8004e00:	e017      	b.n	8004e32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f913 	bl	8005034 <TIM_OC2_SetConfig>
      break;
 8004e0e:	e010      	b.n	8004e32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f976 	bl	8005108 <TIM_OC3_SetConfig>
      break;
 8004e1c:	e009      	b.n	8004e32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f9d9 	bl	80051dc <TIM_OC4_SetConfig>
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004f5c <TIM_Base_SetConfig+0xd0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <TIM_Base_SetConfig+0xd4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f64 <TIM_Base_SetConfig+0xd8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a22      	ldr	r2, [pc, #136]	@ (8004f5c <TIM_Base_SetConfig+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <TIM_Base_SetConfig+0xd4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f64 <TIM_Base_SetConfig+0xd8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a0d      	ldr	r2, [pc, #52]	@ (8004f5c <TIM_Base_SetConfig+0xd0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d103      	bne.n	8004f34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f023 0201 	bic.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]
  }
}
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	40012c00 	.word	0x40012c00
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800

08004f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f023 0201 	bic.w	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0302 	bic.w	r3, r3, #2
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <TIM_OC1_SetConfig+0xc8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10c      	bne.n	8004fde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0308 	bic.w	r3, r3, #8
 8004fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a13      	ldr	r2, [pc, #76]	@ (8005030 <TIM_OC1_SetConfig+0xc8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d111      	bne.n	800500a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00

08005034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f023 0210 	bic.w	r2, r3, #16
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800506a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0320 	bic.w	r3, r3, #32
 800507e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <TIM_OC2_SetConfig+0xd0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10d      	bne.n	80050b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800509a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a14      	ldr	r2, [pc, #80]	@ (8005104 <TIM_OC2_SetConfig+0xd0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d113      	bne.n	80050e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00

08005108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1d      	ldr	r2, [pc, #116]	@ (80051d8 <TIM_OC3_SetConfig+0xd0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10d      	bne.n	8005182 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800516c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a14      	ldr	r2, [pc, #80]	@ (80051d8 <TIM_OC3_SetConfig+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d113      	bne.n	80051b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40012c00 	.word	0x40012c00

080051dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a0f      	ldr	r2, [pc, #60]	@ (8005274 <TIM_OC4_SetConfig+0x98>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d109      	bne.n	8005250 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	019b      	lsls	r3, r3, #6
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr
 8005274:	40012c00 	.word	0x40012c00

08005278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800528c:	2302      	movs	r3, #2
 800528e:	e046      	b.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00e      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052dc:	d009      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a12      	ldr	r2, [pc, #72]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d004      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a10      	ldr	r2, [pc, #64]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d10c      	bne.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4313      	orrs	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800

08005334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e04a      	b.n	8005400 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fb fbb0 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2224      	movs	r2, #36	@ 0x24
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800539a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fef3 	bl	8006188 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80053c0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0208 	orr.w	r2, r2, #8
 80053d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	@ 0x28
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b20      	cmp	r3, #32
 8005426:	d175      	bne.n	8005514 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Transmit+0x2c>
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e06e      	b.n	8005516 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2221      	movs	r2, #33	@ 0x21
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005446:	f7fb fcbb 	bl	8000dc0 <HAL_GetTick>
 800544a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	88fa      	ldrh	r2, [r7, #6]
 8005456:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005460:	d108      	bne.n	8005474 <HAL_UART_Transmit+0x6c>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e003      	b.n	800547c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800547c:	e02e      	b.n	80054dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	2180      	movs	r1, #128	@ 0x80
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fc50 	bl	8005d2e <UART_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e03a      	b.n	8005516 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	3302      	adds	r3, #2
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e007      	b.n	80054ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	3301      	adds	r3, #1
 80054cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1cb      	bne.n	800547e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	2140      	movs	r1, #64	@ 0x40
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fc1c 	bl	8005d2e <UART_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e006      	b.n	8005516 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	e000      	b.n	8005516 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005514:	2302      	movs	r3, #2
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	3720      	adds	r7, #32
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b08a      	sub	sp, #40	@ 0x28
 8005522:	af02      	add	r7, sp, #8
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b20      	cmp	r3, #32
 800553c:	f040 8081 	bne.w	8005642 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_UART_Receive+0x2e>
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e079      	b.n	8005644 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2222      	movs	r2, #34	@ 0x22
 800555a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005564:	f7fb fc2c 	bl	8000dc0 <HAL_GetTick>
 8005568:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557e:	d108      	bne.n	8005592 <HAL_UART_Receive+0x74>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	e003      	b.n	800559a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800559a:	e047      	b.n	800562c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2200      	movs	r2, #0
 80055a4:	2120      	movs	r1, #32
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fbc1 	bl	8005d2e <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e042      	b.n	8005644 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10c      	bne.n	80055de <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	3302      	adds	r3, #2
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e01f      	b.n	800561e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	d007      	beq.n	80055f8 <HAL_UART_Receive+0xda>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <HAL_UART_Receive+0xe8>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005612:	b2da      	uxtb	r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1b2      	bne.n	800559c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08c      	sub	sp, #48	@ 0x30
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b20      	cmp	r3, #32
 8005664:	d14a      	bne.n	80056fc <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800566c:	88fb      	ldrh	r3, [r7, #6]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e043      	b.n	80056fe <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	461a      	mov	r2, r3
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fba9 	bl	8005de0 <UART_Start_Receive_IT>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005694:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005698:	2b00      	cmp	r3, #0
 800569a:	d12c      	bne.n	80056f6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d125      	bne.n	80056f0 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	617b      	str	r3, [r7, #20]
   return(result);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f043 0310 	orr.w	r3, r3, #16
 80056d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056da:	627a      	str	r2, [r7, #36]	@ 0x24
 80056dc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6a39      	ldr	r1, [r7, #32]
 80056e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80056ee:	e002      	b.n	80056f6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80056f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80056fa:	e000      	b.n	80056fe <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3730      	adds	r7, #48	@ 0x30
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b0ba      	sub	sp, #232	@ 0xe8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005734:	2300      	movs	r3, #0
 8005736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10f      	bne.n	800576e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_UART_IRQHandler+0x66>
 800575a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fc50 	bl	800600c <UART_Receive_IT>
      return;
 800576c:	e25b      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800576e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80de 	beq.w	8005934 <HAL_UART_IRQHandler+0x22c>
 8005778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005788:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 80d1 	beq.w	8005934 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <HAL_UART_IRQHandler+0xae>
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	f043 0201 	orr.w	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <HAL_UART_IRQHandler+0xd2>
 80057c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d2:	f043 0202 	orr.w	r2, r3, #2
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <HAL_UART_IRQHandler+0xf6>
 80057e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	f043 0204 	orr.w	r2, r3, #4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d011      	beq.n	800582e <HAL_UART_IRQHandler+0x126>
 800580a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d105      	bne.n	8005822 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f043 0208 	orr.w	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 81f2 	beq.w	8005c1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_UART_IRQHandler+0x14e>
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fbdb 	bl	800600c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <HAL_UART_IRQHandler+0x17a>
 800587a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04f      	beq.n	8005922 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fae5 	bl	8005e52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d041      	beq.n	800591a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3314      	adds	r3, #20
 800589c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3314      	adds	r3, #20
 80058be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1d9      	bne.n	8005896 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d013      	beq.n	8005912 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ee:	4a7e      	ldr	r2, [pc, #504]	@ (8005ae8 <HAL_UART_IRQHandler+0x3e0>)
 80058f0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fb fc66 	bl	80011c8 <HAL_DMA_Abort_IT>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005910:	e00e      	b.n	8005930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f99c 	bl	8005c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	e00a      	b.n	8005930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f998 	bl	8005c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005920:	e006      	b.n	8005930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f994 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800592e:	e175      	b.n	8005c1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	bf00      	nop
    return;
 8005932:	e173      	b.n	8005c1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	2b01      	cmp	r3, #1
 800593a:	f040 814f 	bne.w	8005bdc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8148 	beq.w	8005bdc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8141 	beq.w	8005bdc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80b6 	beq.w	8005aec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800598c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8145 	beq.w	8005c20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800599a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800599e:	429a      	cmp	r2, r3
 80059a0:	f080 813e 	bcs.w	8005c20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	f000 8088 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059e4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1d9      	bne.n	80059b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a28:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e1      	bne.n	8005a04 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a64:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e3      	bne.n	8005a40 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a98:	f023 0310 	bic.w	r3, r3, #16
 8005a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005aaa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e3      	bne.n	8005a86 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fb fb44 	bl	8001150 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb f90c 	bl	8000cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ae4:	e09c      	b.n	8005c20 <HAL_UART_IRQHandler+0x518>
 8005ae6:	bf00      	nop
 8005ae8:	08005f17 	.word	0x08005f17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 808e 	beq.w	8005c24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8089 	beq.w	8005c24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	330c      	adds	r3, #12
 8005b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b36:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e3      	bne.n	8005b12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	623b      	str	r3, [r7, #32]
   return(result);
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e3      	bne.n	8005b4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0310 	bic.w	r3, r3, #16
 8005ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bb4:	61fa      	str	r2, [r7, #28]
 8005bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	69b9      	ldr	r1, [r7, #24]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e3      	bne.n	8005b90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fb f891 	bl	8000cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bda:	e023      	b.n	8005c24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <HAL_UART_IRQHandler+0x4f4>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f9a2 	bl	8005f3e <UART_Transmit_IT>
    return;
 8005bfa:	e014      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00e      	beq.n	8005c26 <HAL_UART_IRQHandler+0x51e>
 8005c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f9e1 	bl	8005fdc <UART_EndTransmit_IT>
    return;
 8005c1a:	e004      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c24:	bf00      	nop
  }
}
 8005c26:	37e8      	adds	r7, #232	@ 0xe8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e020      	b.n	8005cbe <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2224      	movs	r2, #36	@ 0x24
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 030c 	bic.w	r3, r3, #12
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f043 0308 	orr.w	r3, r3, #8
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e020      	b.n	8005d24 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2224      	movs	r2, #36	@ 0x24
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 030c 	bic.w	r3, r3, #12
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f043 0304 	orr.w	r3, r3, #4
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b086      	sub	sp, #24
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3e:	e03b      	b.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d037      	beq.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d48:	f7fb f83a 	bl	8000dc0 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	6a3a      	ldr	r2, [r7, #32]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d302      	bcc.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e03a      	b.n	8005dd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d023      	beq.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b80      	cmp	r3, #128	@ 0x80
 8005d74:	d020      	beq.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b40      	cmp	r3, #64	@ 0x40
 8005d7a:	d01d      	beq.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d116      	bne.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f856 	bl	8005e52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2208      	movs	r2, #8
 8005daa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e00f      	b.n	8005dd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2301      	moveq	r3, #1
 8005dca:	2300      	movne	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	461a      	mov	r2, r3
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d0b4      	beq.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2222      	movs	r2, #34	@ 0x22
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0220 	orr.w	r2, r2, #32
 8005e44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr

08005e52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b095      	sub	sp, #84	@ 0x54
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e5      	bne.n	8005e5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3314      	adds	r3, #20
 8005e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3314      	adds	r3, #20
 8005eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e5      	bne.n	8005e8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d119      	bne.n	8005efe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f023 0310 	bic.w	r3, r3, #16
 8005ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eea:	61ba      	str	r2, [r7, #24]
 8005eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6979      	ldr	r1, [r7, #20]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f0c:	bf00      	nop
 8005f0e:	3754      	adds	r7, #84	@ 0x54
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff fe8d 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b21      	cmp	r3, #33	@ 0x21
 8005f50:	d13e      	bne.n	8005fd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5a:	d114      	bne.n	8005f86 <UART_Transmit_IT+0x48>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d110      	bne.n	8005f86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	621a      	str	r2, [r3, #32]
 8005f84:	e008      	b.n	8005f98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	1c59      	adds	r1, r3, #1
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6211      	str	r1, [r2, #32]
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10f      	bne.n	8005fcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e000      	b.n	8005fd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fd0:	2302      	movs	r3, #2
  }
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr

08005fdc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ff2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fe15 	bl	8005c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08c      	sub	sp, #48	@ 0x30
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b22      	cmp	r3, #34	@ 0x22
 800601e:	f040 80ae 	bne.w	800617e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602a:	d117      	bne.n	800605c <UART_Receive_IT+0x50>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d113      	bne.n	800605c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	b29a      	uxth	r2, r3
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	629a      	str	r2, [r3, #40]	@ 0x28
 800605a:	e026      	b.n	80060aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606e:	d007      	beq.n	8006080 <UART_Receive_IT+0x74>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <UART_Receive_IT+0x82>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e008      	b.n	80060a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800609a:	b2da      	uxtb	r2, r3
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4619      	mov	r1, r3
 80060b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d15d      	bne.n	800617a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0220 	bic.w	r2, r2, #32
 80060cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006100:	2b01      	cmp	r3, #1
 8006102:	d135      	bne.n	8006170 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	330c      	adds	r3, #12
 8006110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	613b      	str	r3, [r7, #16]
   return(result);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f023 0310 	bic.w	r3, r3, #16
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612a:	623a      	str	r2, [r7, #32]
 800612c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	69f9      	ldr	r1, [r7, #28]
 8006130:	6a3a      	ldr	r2, [r7, #32]
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	61bb      	str	r3, [r7, #24]
   return(result);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e5      	bne.n	800610a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b10      	cmp	r3, #16
 800614a:	d10a      	bne.n	8006162 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fa fdc7 	bl	8000cfc <HAL_UARTEx_RxEventCallback>
 800616e:	e002      	b.n	8006176 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff fd64 	bl	8005c3e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e002      	b.n	8006180 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	e000      	b.n	8006180 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800617e:	2302      	movs	r3, #2
  }
}
 8006180:	4618      	mov	r0, r3
 8006182:	3730      	adds	r7, #48	@ 0x30
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80061c2:	f023 030c 	bic.w	r3, r3, #12
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	430b      	orrs	r3, r1
 80061ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a2c      	ldr	r2, [pc, #176]	@ (800629c <UART_SetConfig+0x114>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d103      	bne.n	80061f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061f0:	f7fe fb80 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	e002      	b.n	80061fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061f8:	f7fe fb68 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80061fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009a      	lsls	r2, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	4a22      	ldr	r2, [pc, #136]	@ (80062a0 <UART_SetConfig+0x118>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	0119      	lsls	r1, r3, #4
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009a      	lsls	r2, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	fbb2 f2f3 	udiv	r2, r2, r3
 8006234:	4b1a      	ldr	r3, [pc, #104]	@ (80062a0 <UART_SetConfig+0x118>)
 8006236:	fba3 0302 	umull	r0, r3, r3, r2
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	2064      	movs	r0, #100	@ 0x64
 800623e:	fb00 f303 	mul.w	r3, r0, r3
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	3332      	adds	r3, #50	@ 0x32
 8006248:	4a15      	ldr	r2, [pc, #84]	@ (80062a0 <UART_SetConfig+0x118>)
 800624a:	fba2 2303 	umull	r2, r3, r2, r3
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006254:	4419      	add	r1, r3
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009a      	lsls	r2, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	fbb2 f2f3 	udiv	r2, r2, r3
 800626c:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <UART_SetConfig+0x118>)
 800626e:	fba3 0302 	umull	r0, r3, r3, r2
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2064      	movs	r0, #100	@ 0x64
 8006276:	fb00 f303 	mul.w	r3, r0, r3
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	3332      	adds	r3, #50	@ 0x32
 8006280:	4a07      	ldr	r2, [pc, #28]	@ (80062a0 <UART_SetConfig+0x118>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	f003 020f 	and.w	r2, r3, #15
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	440a      	add	r2, r1
 8006292:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006294:	bf00      	nop
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40013800 	.word	0x40013800
 80062a0:	51eb851f 	.word	0x51eb851f

080062a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062b6:	2b84      	cmp	r3, #132	@ 0x84
 80062b8:	d005      	beq.n	80062c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80062ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	3303      	adds	r3, #3
 80062c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr

080062d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062d6:	f000 faf7 	bl	80068c8 <vTaskStartScheduler>
  
  return osOK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	bd80      	pop	{r7, pc}

080062e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e2:	b089      	sub	sp, #36	@ 0x24
 80062e4:	af04      	add	r7, sp, #16
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d020      	beq.n	8006334 <osThreadCreate+0x54>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01c      	beq.n	8006334 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685c      	ldr	r4, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691e      	ldr	r6, [r3, #16]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ffc9 	bl	80062a4 <makeFreeRtosPriority>
 8006312:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800631c:	9202      	str	r2, [sp, #8]
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	9100      	str	r1, [sp, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	4632      	mov	r2, r6
 8006326:	4629      	mov	r1, r5
 8006328:	4620      	mov	r0, r4
 800632a:	f000 f8e8 	bl	80064fe <xTaskCreateStatic>
 800632e:	4603      	mov	r3, r0
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e01c      	b.n	800636e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685c      	ldr	r4, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006340:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ffab 	bl	80062a4 <makeFreeRtosPriority>
 800634e:	4602      	mov	r2, r0
 8006350:	f107 030c 	add.w	r3, r7, #12
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	9200      	str	r2, [sp, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	4632      	mov	r2, r6
 800635c:	4629      	mov	r1, r5
 800635e:	4620      	mov	r0, r4
 8006360:	f000 f92d 	bl	80065be <xTaskCreate>
 8006364:	4603      	mov	r3, r0
 8006366:	2b01      	cmp	r3, #1
 8006368:	d001      	beq.n	800636e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	e000      	b.n	8006370 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800636e:	68fb      	ldr	r3, [r7, #12]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006378 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <osDelay+0x16>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	e000      	b.n	8006390 <osDelay+0x18>
 800638e:	2301      	movs	r3, #1
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fa63 	bl	800685c <vTaskDelay>
  
  return osOK;
 8006396:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f103 0208 	add.w	r2, r3, #8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f103 0208 	add.w	r2, r3, #8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f103 0208 	add.w	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr

080063de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr

080063f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr

0800643c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d103      	bne.n	800645c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e00c      	b.n	8006476 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3308      	adds	r3, #8
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e002      	b.n	800646a <vListInsert+0x2e>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	429a      	cmp	r2, r3
 8006474:	d2f6      	bcs.n	8006464 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	601a      	str	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6892      	ldr	r2, [r2, #8]
 80064c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6852      	ldr	r2, [r2, #4]
 80064cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d103      	bne.n	80064e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	1e5a      	subs	r2, r3, #1
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr

080064fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b08e      	sub	sp, #56	@ 0x38
 8006502:	af04      	add	r7, sp, #16
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800650c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	61fb      	str	r3, [r7, #28]
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006548:	23a0      	movs	r3, #160	@ 0xa0
 800654a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006550:	d00b      	beq.n	800656a <xTaskCreateStatic+0x6c>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	61bb      	str	r3, [r7, #24]
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	e7fd      	b.n	8006566 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800656a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800656c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01e      	beq.n	80065b0 <xTaskCreateStatic+0xb2>
 8006572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01b      	beq.n	80065b0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006580:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	2202      	movs	r2, #2
 8006586:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800658a:	2300      	movs	r3, #0
 800658c:	9303      	str	r3, [sp, #12]
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	9302      	str	r3, [sp, #8]
 8006592:	f107 0314 	add.w	r3, r7, #20
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f850 	bl	8006648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065aa:	f000 f8ed 	bl	8006788 <prvAddNewTaskToReadyList>
 80065ae:	e001      	b.n	80065b4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065b4:	697b      	ldr	r3, [r7, #20]
	}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3728      	adds	r7, #40	@ 0x28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b08c      	sub	sp, #48	@ 0x30
 80065c2:	af04      	add	r7, sp, #16
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fe9c 	bl	8007310 <pvPortMalloc>
 80065d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00e      	beq.n	80065fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065e0:	20a0      	movs	r0, #160	@ 0xa0
 80065e2:	f000 fe95 	bl	8007310 <pvPortMalloc>
 80065e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80065f4:	e005      	b.n	8006602 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065f6:	6978      	ldr	r0, [r7, #20]
 80065f8:	f000 ff58 	bl	80074ac <vPortFree>
 80065fc:	e001      	b.n	8006602 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d017      	beq.n	8006638 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	2300      	movs	r3, #0
 8006614:	9303      	str	r3, [sp, #12]
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	9302      	str	r3, [sp, #8]
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f80e 	bl	8006648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800662c:	69f8      	ldr	r0, [r7, #28]
 800662e:	f000 f8ab 	bl	8006788 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006632:	2301      	movs	r3, #1
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e002      	b.n	800663e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006638:	f04f 33ff 	mov.w	r3, #4294967295
 800663c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800663e:	69bb      	ldr	r3, [r7, #24]
	}
 8006640:	4618      	mov	r0, r3
 8006642:	3720      	adds	r7, #32
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006660:	3b01      	subs	r3, #1
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	617b      	str	r3, [r7, #20]
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	e7fd      	b.n	800668e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01f      	beq.n	80066d8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	e012      	b.n	80066c4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4413      	add	r3, r2
 80066a4:	7819      	ldrb	r1, [r3, #0]
 80066a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	3334      	adds	r3, #52	@ 0x34
 80066ae:	460a      	mov	r2, r1
 80066b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	4413      	add	r3, r2
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d006      	beq.n	80066cc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3301      	adds	r3, #1
 80066c2:	61fb      	str	r3, [r7, #28]
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	2b0f      	cmp	r3, #15
 80066c8:	d9e9      	bls.n	800669e <prvInitialiseNewTask+0x56>
 80066ca:	e000      	b.n	80066ce <prvInitialiseNewTask+0x86>
			{
				break;
 80066cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066d6:	e003      	b.n	80066e0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d901      	bls.n	80066ea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066e6:	2306      	movs	r3, #6
 80066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066f4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	2200      	movs	r2, #0
 80066fa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fe6c 	bl	80063de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	3318      	adds	r3, #24
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff fe67 	bl	80063de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006714:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	f1c3 0207 	rsb	r2, r3, #7
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006724:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	2200      	movs	r2, #0
 8006732:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006738:	334c      	adds	r3, #76	@ 0x4c
 800673a:	224c      	movs	r2, #76	@ 0x4c
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f000 ffd2 	bl	80076e8 <memset>
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	4a0d      	ldr	r2, [pc, #52]	@ (800677c <prvInitialiseNewTask+0x134>)
 8006748:	651a      	str	r2, [r3, #80]	@ 0x50
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	4a0c      	ldr	r2, [pc, #48]	@ (8006780 <prvInitialiseNewTask+0x138>)
 800674e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006752:	4a0c      	ldr	r2, [pc, #48]	@ (8006784 <prvInitialiseNewTask+0x13c>)
 8006754:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68f9      	ldr	r1, [r7, #12]
 800675a:	69b8      	ldr	r0, [r7, #24]
 800675c:	f000 fc28 	bl	8006fb0 <pxPortInitialiseStack>
 8006760:	4602      	mov	r2, r0
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006770:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006772:	bf00      	nop
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20001ab0 	.word	0x20001ab0
 8006780:	20001b18 	.word	0x20001b18
 8006784:	20001b80 	.word	0x20001b80

08006788 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006790:	f000 fcfc 	bl	800718c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006794:	4b2a      	ldr	r3, [pc, #168]	@ (8006840 <prvAddNewTaskToReadyList+0xb8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a29      	ldr	r2, [pc, #164]	@ (8006840 <prvAddNewTaskToReadyList+0xb8>)
 800679c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800679e:	4b29      	ldr	r3, [pc, #164]	@ (8006844 <prvAddNewTaskToReadyList+0xbc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067a6:	4a27      	ldr	r2, [pc, #156]	@ (8006844 <prvAddNewTaskToReadyList+0xbc>)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067ac:	4b24      	ldr	r3, [pc, #144]	@ (8006840 <prvAddNewTaskToReadyList+0xb8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d110      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067b4:	f000 fad2 	bl	8006d5c <prvInitialiseTaskLists>
 80067b8:	e00d      	b.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067ba:	4b23      	ldr	r3, [pc, #140]	@ (8006848 <prvAddNewTaskToReadyList+0xc0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067c2:	4b20      	ldr	r3, [pc, #128]	@ (8006844 <prvAddNewTaskToReadyList+0xbc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d802      	bhi.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006844 <prvAddNewTaskToReadyList+0xbc>)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067d6:	4b1d      	ldr	r3, [pc, #116]	@ (800684c <prvAddNewTaskToReadyList+0xc4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	4a1b      	ldr	r2, [pc, #108]	@ (800684c <prvAddNewTaskToReadyList+0xc4>)
 80067de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	2201      	movs	r2, #1
 80067e6:	409a      	lsls	r2, r3
 80067e8:	4b19      	ldr	r3, [pc, #100]	@ (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	4a18      	ldr	r2, [pc, #96]	@ (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4a15      	ldr	r2, [pc, #84]	@ (8006854 <prvAddNewTaskToReadyList+0xcc>)
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3304      	adds	r3, #4
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f7ff fdf4 	bl	80063f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800680e:	f000 fced 	bl	80071ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <prvAddNewTaskToReadyList+0xc0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800681a:	4b0a      	ldr	r3, [pc, #40]	@ (8006844 <prvAddNewTaskToReadyList+0xbc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	429a      	cmp	r2, r3
 8006826:	d207      	bcs.n	8006838 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006828:	4b0b      	ldr	r3, [pc, #44]	@ (8006858 <prvAddNewTaskToReadyList+0xd0>)
 800682a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000e5c 	.word	0x20000e5c
 8006844:	20000d5c 	.word	0x20000d5c
 8006848:	20000e68 	.word	0x20000e68
 800684c:	20000e78 	.word	0x20000e78
 8006850:	20000e64 	.word	0x20000e64
 8006854:	20000d60 	.word	0x20000d60
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d018      	beq.n	80068a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800686e:	4b14      	ldr	r3, [pc, #80]	@ (80068c0 <vTaskDelay+0x64>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <vTaskDelay+0x32>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	60bb      	str	r3, [r7, #8]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800688e:	f000 f885 	bl	800699c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006892:	2100      	movs	r1, #0
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fb25 	bl	8006ee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800689a:	f000 f88d 	bl	80069b8 <xTaskResumeAll>
 800689e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d107      	bne.n	80068b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80068a6:	4b07      	ldr	r3, [pc, #28]	@ (80068c4 <vTaskDelay+0x68>)
 80068a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000e84 	.word	0x20000e84
 80068c4:	e000ed04 	.word	0xe000ed04

080068c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	@ 0x28
 80068cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068d6:	463a      	mov	r2, r7
 80068d8:	1d39      	adds	r1, r7, #4
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	4618      	mov	r0, r3
 80068e0:	f7f9 fd72 	bl	80003c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	9202      	str	r2, [sp, #8]
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	2300      	movs	r3, #0
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	2300      	movs	r3, #0
 80068f4:	460a      	mov	r2, r1
 80068f6:	4921      	ldr	r1, [pc, #132]	@ (800697c <vTaskStartScheduler+0xb4>)
 80068f8:	4821      	ldr	r0, [pc, #132]	@ (8006980 <vTaskStartScheduler+0xb8>)
 80068fa:	f7ff fe00 	bl	80064fe <xTaskCreateStatic>
 80068fe:	4603      	mov	r3, r0
 8006900:	4a20      	ldr	r2, [pc, #128]	@ (8006984 <vTaskStartScheduler+0xbc>)
 8006902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006904:	4b1f      	ldr	r3, [pc, #124]	@ (8006984 <vTaskStartScheduler+0xbc>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800690c:	2301      	movs	r3, #1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	e001      	b.n	8006916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d11b      	bne.n	8006954 <vTaskStartScheduler+0x8c>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	613b      	str	r3, [r7, #16]
}
 800692e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006930:	4b15      	ldr	r3, [pc, #84]	@ (8006988 <vTaskStartScheduler+0xc0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	334c      	adds	r3, #76	@ 0x4c
 8006936:	4a15      	ldr	r2, [pc, #84]	@ (800698c <vTaskStartScheduler+0xc4>)
 8006938:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800693a:	4b15      	ldr	r3, [pc, #84]	@ (8006990 <vTaskStartScheduler+0xc8>)
 800693c:	f04f 32ff 	mov.w	r2, #4294967295
 8006940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006942:	4b14      	ldr	r3, [pc, #80]	@ (8006994 <vTaskStartScheduler+0xcc>)
 8006944:	2201      	movs	r2, #1
 8006946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006948:	4b13      	ldr	r3, [pc, #76]	@ (8006998 <vTaskStartScheduler+0xd0>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800694e:	f000 fbab 	bl	80070a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006952:	e00f      	b.n	8006974 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d10b      	bne.n	8006974 <vTaskStartScheduler+0xac>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	60fb      	str	r3, [r7, #12]
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	e7fd      	b.n	8006970 <vTaskStartScheduler+0xa8>
}
 8006974:	bf00      	nop
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	08007928 	.word	0x08007928
 8006980:	08006d2d 	.word	0x08006d2d
 8006984:	20000e80 	.word	0x20000e80
 8006988:	20000d5c 	.word	0x20000d5c
 800698c:	20000010 	.word	0x20000010
 8006990:	20000e7c 	.word	0x20000e7c
 8006994:	20000e68 	.word	0x20000e68
 8006998:	20000e60 	.word	0x20000e60

0800699c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069a0:	4b04      	ldr	r3, [pc, #16]	@ (80069b4 <vTaskSuspendAll+0x18>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	4a03      	ldr	r2, [pc, #12]	@ (80069b4 <vTaskSuspendAll+0x18>)
 80069a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000e84 	.word	0x20000e84

080069b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069c6:	4b42      	ldr	r3, [pc, #264]	@ (8006ad0 <xTaskResumeAll+0x118>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10b      	bne.n	80069e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	603b      	str	r3, [r7, #0]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069e6:	f000 fbd1 	bl	800718c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069ea:	4b39      	ldr	r3, [pc, #228]	@ (8006ad0 <xTaskResumeAll+0x118>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	4a37      	ldr	r2, [pc, #220]	@ (8006ad0 <xTaskResumeAll+0x118>)
 80069f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f4:	4b36      	ldr	r3, [pc, #216]	@ (8006ad0 <xTaskResumeAll+0x118>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d161      	bne.n	8006ac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069fc:	4b35      	ldr	r3, [pc, #212]	@ (8006ad4 <xTaskResumeAll+0x11c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d05d      	beq.n	8006ac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a04:	e02e      	b.n	8006a64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a06:	4b34      	ldr	r3, [pc, #208]	@ (8006ad8 <xTaskResumeAll+0x120>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3318      	adds	r3, #24
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff fd4a 	bl	80064ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fd45 	bl	80064ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	2201      	movs	r2, #1
 8006a28:	409a      	lsls	r2, r3
 8006a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006adc <xTaskResumeAll+0x124>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	4a2a      	ldr	r2, [pc, #168]	@ (8006adc <xTaskResumeAll+0x124>)
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4a27      	ldr	r2, [pc, #156]	@ (8006ae0 <xTaskResumeAll+0x128>)
 8006a42:	441a      	add	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f7ff fcd3 	bl	80063f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a54:	4b23      	ldr	r3, [pc, #140]	@ (8006ae4 <xTaskResumeAll+0x12c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a5e:	4b22      	ldr	r3, [pc, #136]	@ (8006ae8 <xTaskResumeAll+0x130>)
 8006a60:	2201      	movs	r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a64:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad8 <xTaskResumeAll+0x120>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1cc      	bne.n	8006a06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a72:	f000 fa17 	bl	8006ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a76:	4b1d      	ldr	r3, [pc, #116]	@ (8006aec <xTaskResumeAll+0x134>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a82:	f000 f837 	bl	8006af4 <xTaskIncrementTick>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a8c:	4b16      	ldr	r3, [pc, #88]	@ (8006ae8 <xTaskResumeAll+0x130>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f1      	bne.n	8006a82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006a9e:	4b13      	ldr	r3, [pc, #76]	@ (8006aec <xTaskResumeAll+0x134>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006aa4:	4b10      	ldr	r3, [pc, #64]	@ (8006ae8 <xTaskResumeAll+0x130>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8006af0 <xTaskResumeAll+0x138>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ac0:	f000 fb94 	bl	80071ec <vPortExitCritical>

	return xAlreadyYielded;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000e84 	.word	0x20000e84
 8006ad4:	20000e5c 	.word	0x20000e5c
 8006ad8:	20000e1c 	.word	0x20000e1c
 8006adc:	20000e64 	.word	0x20000e64
 8006ae0:	20000d60 	.word	0x20000d60
 8006ae4:	20000d5c 	.word	0x20000d5c
 8006ae8:	20000e70 	.word	0x20000e70
 8006aec:	20000e6c 	.word	0x20000e6c
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afe:	4b4f      	ldr	r3, [pc, #316]	@ (8006c3c <xTaskIncrementTick+0x148>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 808f 	bne.w	8006c26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b08:	4b4d      	ldr	r3, [pc, #308]	@ (8006c40 <xTaskIncrementTick+0x14c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b10:	4a4b      	ldr	r2, [pc, #300]	@ (8006c40 <xTaskIncrementTick+0x14c>)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d121      	bne.n	8006b60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b1c:	4b49      	ldr	r3, [pc, #292]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	603b      	str	r3, [r7, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	e7fd      	b.n	8006b3a <xTaskIncrementTick+0x46>
 8006b3e:	4b41      	ldr	r3, [pc, #260]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	4b40      	ldr	r3, [pc, #256]	@ (8006c48 <xTaskIncrementTick+0x154>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a3e      	ldr	r2, [pc, #248]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c48 <xTaskIncrementTick+0x154>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	4b3e      	ldr	r3, [pc, #248]	@ (8006c4c <xTaskIncrementTick+0x158>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	4a3c      	ldr	r2, [pc, #240]	@ (8006c4c <xTaskIncrementTick+0x158>)
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	f000 f9a2 	bl	8006ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b60:	4b3b      	ldr	r3, [pc, #236]	@ (8006c50 <xTaskIncrementTick+0x15c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d348      	bcc.n	8006bfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b6a:	4b36      	ldr	r3, [pc, #216]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b74:	4b36      	ldr	r3, [pc, #216]	@ (8006c50 <xTaskIncrementTick+0x15c>)
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	601a      	str	r2, [r3, #0]
					break;
 8006b7c:	e03e      	b.n	8006bfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7e:	4b31      	ldr	r3, [pc, #196]	@ (8006c44 <xTaskIncrementTick+0x150>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d203      	bcs.n	8006b9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b96:	4a2e      	ldr	r2, [pc, #184]	@ (8006c50 <xTaskIncrementTick+0x15c>)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b9c:	e02e      	b.n	8006bfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fc82 	bl	80064ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3318      	adds	r3, #24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fc79 	bl	80064ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	409a      	lsls	r2, r3
 8006bc2:	4b24      	ldr	r3, [pc, #144]	@ (8006c54 <xTaskIncrementTick+0x160>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	4a22      	ldr	r2, [pc, #136]	@ (8006c54 <xTaskIncrementTick+0x160>)
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8006c58 <xTaskIncrementTick+0x164>)
 8006bda:	441a      	add	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4619      	mov	r1, r3
 8006be2:	4610      	mov	r0, r2
 8006be4:	f7ff fc07 	bl	80063f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bec:	4b1b      	ldr	r3, [pc, #108]	@ (8006c5c <xTaskIncrementTick+0x168>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d3b9      	bcc.n	8006b6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bfa:	e7b6      	b.n	8006b6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bfc:	4b17      	ldr	r3, [pc, #92]	@ (8006c5c <xTaskIncrementTick+0x168>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c02:	4915      	ldr	r1, [pc, #84]	@ (8006c58 <xTaskIncrementTick+0x164>)
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d901      	bls.n	8006c18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c18:	4b11      	ldr	r3, [pc, #68]	@ (8006c60 <xTaskIncrementTick+0x16c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e004      	b.n	8006c30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c26:	4b0f      	ldr	r3, [pc, #60]	@ (8006c64 <xTaskIncrementTick+0x170>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c64 <xTaskIncrementTick+0x170>)
 8006c2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c30:	697b      	ldr	r3, [r7, #20]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000e84 	.word	0x20000e84
 8006c40:	20000e60 	.word	0x20000e60
 8006c44:	20000e14 	.word	0x20000e14
 8006c48:	20000e18 	.word	0x20000e18
 8006c4c:	20000e74 	.word	0x20000e74
 8006c50:	20000e7c 	.word	0x20000e7c
 8006c54:	20000e64 	.word	0x20000e64
 8006c58:	20000d60 	.word	0x20000d60
 8006c5c:	20000d5c 	.word	0x20000d5c
 8006c60:	20000e70 	.word	0x20000e70
 8006c64:	20000e6c 	.word	0x20000e6c

08006c68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c6e:	4b29      	ldr	r3, [pc, #164]	@ (8006d14 <vTaskSwitchContext+0xac>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c76:	4b28      	ldr	r3, [pc, #160]	@ (8006d18 <vTaskSwitchContext+0xb0>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c7c:	e045      	b.n	8006d0a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006c7e:	4b26      	ldr	r3, [pc, #152]	@ (8006d18 <vTaskSwitchContext+0xb0>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c84:	4b25      	ldr	r3, [pc, #148]	@ (8006d1c <vTaskSwitchContext+0xb4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	fab3 f383 	clz	r3, r3
 8006c90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	f1c3 031f 	rsb	r3, r3, #31
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	4921      	ldr	r1, [pc, #132]	@ (8006d20 <vTaskSwitchContext+0xb8>)
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <vTaskSwitchContext+0x5a>
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4a13      	ldr	r2, [pc, #76]	@ (8006d20 <vTaskSwitchContext+0xb8>)
 8006cd2:	4413      	add	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	605a      	str	r2, [r3, #4]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d104      	bne.n	8006cf6 <vTaskSwitchContext+0x8e>
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	605a      	str	r2, [r3, #4]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	4a09      	ldr	r2, [pc, #36]	@ (8006d24 <vTaskSwitchContext+0xbc>)
 8006cfe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d00:	4b08      	ldr	r3, [pc, #32]	@ (8006d24 <vTaskSwitchContext+0xbc>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	334c      	adds	r3, #76	@ 0x4c
 8006d06:	4a08      	ldr	r2, [pc, #32]	@ (8006d28 <vTaskSwitchContext+0xc0>)
 8006d08:	6013      	str	r3, [r2, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr
 8006d14:	20000e84 	.word	0x20000e84
 8006d18:	20000e70 	.word	0x20000e70
 8006d1c:	20000e64 	.word	0x20000e64
 8006d20:	20000d60 	.word	0x20000d60
 8006d24:	20000d5c 	.word	0x20000d5c
 8006d28:	20000010 	.word	0x20000010

08006d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d34:	f000 f852 	bl	8006ddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d38:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <prvIdleTask+0x28>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d9f9      	bls.n	8006d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <prvIdleTask+0x2c>)
 8006d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d50:	e7f0      	b.n	8006d34 <prvIdleTask+0x8>
 8006d52:	bf00      	nop
 8006d54:	20000d60 	.word	0x20000d60
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d62:	2300      	movs	r3, #0
 8006d64:	607b      	str	r3, [r7, #4]
 8006d66:	e00c      	b.n	8006d82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4a12      	ldr	r2, [pc, #72]	@ (8006dbc <prvInitialiseTaskLists+0x60>)
 8006d74:	4413      	add	r3, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fb12 	bl	80063a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b06      	cmp	r3, #6
 8006d86:	d9ef      	bls.n	8006d68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d88:	480d      	ldr	r0, [pc, #52]	@ (8006dc0 <prvInitialiseTaskLists+0x64>)
 8006d8a:	f7ff fb09 	bl	80063a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d8e:	480d      	ldr	r0, [pc, #52]	@ (8006dc4 <prvInitialiseTaskLists+0x68>)
 8006d90:	f7ff fb06 	bl	80063a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d94:	480c      	ldr	r0, [pc, #48]	@ (8006dc8 <prvInitialiseTaskLists+0x6c>)
 8006d96:	f7ff fb03 	bl	80063a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d9a:	480c      	ldr	r0, [pc, #48]	@ (8006dcc <prvInitialiseTaskLists+0x70>)
 8006d9c:	f7ff fb00 	bl	80063a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006da0:	480b      	ldr	r0, [pc, #44]	@ (8006dd0 <prvInitialiseTaskLists+0x74>)
 8006da2:	f7ff fafd 	bl	80063a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006da6:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd4 <prvInitialiseTaskLists+0x78>)
 8006da8:	4a05      	ldr	r2, [pc, #20]	@ (8006dc0 <prvInitialiseTaskLists+0x64>)
 8006daa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <prvInitialiseTaskLists+0x7c>)
 8006dae:	4a05      	ldr	r2, [pc, #20]	@ (8006dc4 <prvInitialiseTaskLists+0x68>)
 8006db0:	601a      	str	r2, [r3, #0]
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000d60 	.word	0x20000d60
 8006dc0:	20000dec 	.word	0x20000dec
 8006dc4:	20000e00 	.word	0x20000e00
 8006dc8:	20000e1c 	.word	0x20000e1c
 8006dcc:	20000e30 	.word	0x20000e30
 8006dd0:	20000e48 	.word	0x20000e48
 8006dd4:	20000e14 	.word	0x20000e14
 8006dd8:	20000e18 	.word	0x20000e18

08006ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006de2:	e019      	b.n	8006e18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006de4:	f000 f9d2 	bl	800718c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de8:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <prvCheckTasksWaitingTermination+0x50>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fb59 	bl	80064ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <prvCheckTasksWaitingTermination+0x54>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	4a0b      	ldr	r2, [pc, #44]	@ (8006e30 <prvCheckTasksWaitingTermination+0x54>)
 8006e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e04:	4b0b      	ldr	r3, [pc, #44]	@ (8006e34 <prvCheckTasksWaitingTermination+0x58>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e34 <prvCheckTasksWaitingTermination+0x58>)
 8006e0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e0e:	f000 f9ed 	bl	80071ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f810 	bl	8006e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e18:	4b06      	ldr	r3, [pc, #24]	@ (8006e34 <prvCheckTasksWaitingTermination+0x58>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e1      	bne.n	8006de4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000e30 	.word	0x20000e30
 8006e30:	20000e5c 	.word	0x20000e5c
 8006e34:	20000e44 	.word	0x20000e44

08006e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	334c      	adds	r3, #76	@ 0x4c
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fc57 	bl	80076f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d108      	bne.n	8006e66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fb27 	bl	80074ac <vPortFree>
				vPortFree( pxTCB );
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fb24 	bl	80074ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e64:	e019      	b.n	8006e9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d103      	bne.n	8006e78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb1b 	bl	80074ac <vPortFree>
	}
 8006e76:	e010      	b.n	8006e9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d00b      	beq.n	8006e9a <prvDeleteTCB+0x62>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60fb      	str	r3, [r7, #12]
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <prvDeleteTCB+0x5e>
	}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <prvResetNextTaskUnblockTime+0x38>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ebc:	e008      	b.n	8006ed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebe:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <prvResetNextTaskUnblockTime+0x38>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4a04      	ldr	r2, [pc, #16]	@ (8006ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ece:	6013      	str	r3, [r2, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000e14 	.word	0x20000e14
 8006ee0:	20000e7c 	.word	0x20000e7c

08006ee4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eee:	4b29      	ldr	r3, [pc, #164]	@ (8006f94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef4:	4b28      	ldr	r3, [pc, #160]	@ (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fad6 	bl	80064ac <uxListRemove>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f06:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43da      	mvns	r2, r3
 8006f14:	4b21      	ldr	r3, [pc, #132]	@ (8006f9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	4a20      	ldr	r2, [pc, #128]	@ (8006f9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d10a      	bne.n	8006f3c <prvAddCurrentTaskToDelayedList+0x58>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	481a      	ldr	r0, [pc, #104]	@ (8006fa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f36:	f7ff fa5e 	bl	80063f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f3a:	e026      	b.n	8006f8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f44:	4b14      	ldr	r3, [pc, #80]	@ (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d209      	bcs.n	8006f68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f54:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	4b0f      	ldr	r3, [pc, #60]	@ (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7ff fa6b 	bl	800643c <vListInsert>
}
 8006f66:	e010      	b.n	8006f8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f68:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4619      	mov	r1, r3
 8006f74:	4610      	mov	r0, r2
 8006f76:	f7ff fa61 	bl	800643c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fac <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d202      	bcs.n	8006f8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f84:	4a09      	ldr	r2, [pc, #36]	@ (8006fac <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6013      	str	r3, [r2, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000e60 	.word	0x20000e60
 8006f98:	20000d5c 	.word	0x20000d5c
 8006f9c:	20000e64 	.word	0x20000e64
 8006fa0:	20000e48 	.word	0x20000e48
 8006fa4:	20000e18 	.word	0x20000e18
 8006fa8:	20000e14 	.word	0x20000e14
 8006fac:	20000e7c 	.word	0x20000e7c

08006fb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3b04      	subs	r3, #4
 8006fc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3b04      	subs	r3, #4
 8006fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 0201 	bic.w	r2, r3, #1
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3b04      	subs	r3, #4
 8006fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fe0:	4a08      	ldr	r2, [pc, #32]	@ (8007004 <pxPortInitialiseStack+0x54>)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3b14      	subs	r3, #20
 8006fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3b20      	subs	r3, #32
 8006ff6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr
 8007004:	08007009 	.word	0x08007009

08007008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800700e:	2300      	movs	r3, #0
 8007010:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007012:	4b12      	ldr	r3, [pc, #72]	@ (800705c <prvTaskExitError+0x54>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d00b      	beq.n	8007034 <prvTaskExitError+0x2c>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	60fb      	str	r3, [r7, #12]
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <prvTaskExitError+0x28>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	60bb      	str	r3, [r7, #8]
}
 8007046:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007048:	bf00      	nop
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0fc      	beq.n	800704a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr
 800705c:	2000000c 	.word	0x2000000c

08007060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007060:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <pxCurrentTCBConst2>)
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800706a:	f380 8809 	msr	PSP, r0
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8811 	msr	BASEPRI, r0
 800707a:	f04e 0e0d 	orr.w	lr, lr, #13
 800707e:	4770      	bx	lr

08007080 <pxCurrentTCBConst2>:
 8007080:	20000d5c 	.word	0x20000d5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007088:	4806      	ldr	r0, [pc, #24]	@ (80070a4 <prvPortStartFirstTask+0x1c>)
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f380 8808 	msr	MSP, r0
 8007092:	b662      	cpsie	i
 8007094:	b661      	cpsie	f
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	df00      	svc	0
 80070a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070a2:	bf00      	nop
 80070a4:	e000ed08 	.word	0xe000ed08

080070a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070ae:	4b32      	ldr	r3, [pc, #200]	@ (8007178 <xPortStartScheduler+0xd0>)
 80070b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	22ff      	movs	r2, #255	@ 0xff
 80070be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	4b2a      	ldr	r3, [pc, #168]	@ (800717c <xPortStartScheduler+0xd4>)
 80070d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007180 <xPortStartScheduler+0xd8>)
 80070d8:	2207      	movs	r2, #7
 80070da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070dc:	e009      	b.n	80070f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80070de:	4b28      	ldr	r3, [pc, #160]	@ (8007180 <xPortStartScheduler+0xd8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	4a26      	ldr	r2, [pc, #152]	@ (8007180 <xPortStartScheduler+0xd8>)
 80070e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070f2:	78fb      	ldrb	r3, [r7, #3]
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070fa:	2b80      	cmp	r3, #128	@ 0x80
 80070fc:	d0ef      	beq.n	80070de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070fe:	4b20      	ldr	r3, [pc, #128]	@ (8007180 <xPortStartScheduler+0xd8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1c3 0307 	rsb	r3, r3, #7
 8007106:	2b04      	cmp	r3, #4
 8007108:	d00b      	beq.n	8007122 <xPortStartScheduler+0x7a>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	60bb      	str	r3, [r7, #8]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007122:	4b17      	ldr	r3, [pc, #92]	@ (8007180 <xPortStartScheduler+0xd8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	4a15      	ldr	r2, [pc, #84]	@ (8007180 <xPortStartScheduler+0xd8>)
 800712a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800712c:	4b14      	ldr	r3, [pc, #80]	@ (8007180 <xPortStartScheduler+0xd8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007134:	4a12      	ldr	r2, [pc, #72]	@ (8007180 <xPortStartScheduler+0xd8>)
 8007136:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007140:	4b10      	ldr	r3, [pc, #64]	@ (8007184 <xPortStartScheduler+0xdc>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a0f      	ldr	r2, [pc, #60]	@ (8007184 <xPortStartScheduler+0xdc>)
 8007146:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800714a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800714c:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <xPortStartScheduler+0xdc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0c      	ldr	r2, [pc, #48]	@ (8007184 <xPortStartScheduler+0xdc>)
 8007152:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007156:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007158:	f000 f8b8 	bl	80072cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800715c:	4b0a      	ldr	r3, [pc, #40]	@ (8007188 <xPortStartScheduler+0xe0>)
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007162:	f7ff ff91 	bl	8007088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007166:	f7ff fd7f 	bl	8006c68 <vTaskSwitchContext>
	prvTaskExitError();
 800716a:	f7ff ff4d 	bl	8007008 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	e000e400 	.word	0xe000e400
 800717c:	20000e88 	.word	0x20000e88
 8007180:	20000e8c 	.word	0x20000e8c
 8007184:	e000ed20 	.word	0xe000ed20
 8007188:	2000000c 	.word	0x2000000c

0800718c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	607b      	str	r3, [r7, #4]
}
 80071a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071a6:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <vPortEnterCritical+0x58>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3301      	adds	r3, #1
 80071ac:	4a0d      	ldr	r2, [pc, #52]	@ (80071e4 <vPortEnterCritical+0x58>)
 80071ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071b0:	4b0c      	ldr	r3, [pc, #48]	@ (80071e4 <vPortEnterCritical+0x58>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d110      	bne.n	80071da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071b8:	4b0b      	ldr	r3, [pc, #44]	@ (80071e8 <vPortEnterCritical+0x5c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <vPortEnterCritical+0x4e>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	603b      	str	r3, [r7, #0]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <vPortEnterCritical+0x4a>
	}
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr
 80071e4:	2000000c 	.word	0x2000000c
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071f2:	4b12      	ldr	r3, [pc, #72]	@ (800723c <vPortExitCritical+0x50>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <vPortExitCritical+0x26>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	607b      	str	r3, [r7, #4]
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	e7fd      	b.n	800720e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007212:	4b0a      	ldr	r3, [pc, #40]	@ (800723c <vPortExitCritical+0x50>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3b01      	subs	r3, #1
 8007218:	4a08      	ldr	r2, [pc, #32]	@ (800723c <vPortExitCritical+0x50>)
 800721a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800721c:	4b07      	ldr	r3, [pc, #28]	@ (800723c <vPortExitCritical+0x50>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <vPortExitCritical+0x44>
 8007224:	2300      	movs	r3, #0
 8007226:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800722e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	2000000c 	.word	0x2000000c

08007240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007240:	f3ef 8009 	mrs	r0, PSP
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <pxCurrentTCBConst>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007250:	6010      	str	r0, [r2, #0]
 8007252:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007256:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800725a:	f380 8811 	msr	BASEPRI, r0
 800725e:	f7ff fd03 	bl	8006c68 <vTaskSwitchContext>
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8811 	msr	BASEPRI, r0
 800726a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800726e:	6819      	ldr	r1, [r3, #0]
 8007270:	6808      	ldr	r0, [r1, #0]
 8007272:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007276:	f380 8809 	msr	PSP, r0
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	4770      	bx	lr

08007280 <pxCurrentTCBConst>:
 8007280:	20000d5c 	.word	0x20000d5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	607b      	str	r3, [r7, #4]
}
 80072a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072a2:	f7ff fc27 	bl	8006af4 <xTaskIncrementTick>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072ac:	4b06      	ldr	r3, [pc, #24]	@ (80072c8 <SysTick_Handler+0x40>)
 80072ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	2300      	movs	r3, #0
 80072b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f383 8811 	msr	BASEPRI, r3
}
 80072be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072d0:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <vPortSetupTimerInterrupt+0x30>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <vPortSetupTimerInterrupt+0x34>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072dc:	4b09      	ldr	r3, [pc, #36]	@ (8007304 <vPortSetupTimerInterrupt+0x38>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a09      	ldr	r2, [pc, #36]	@ (8007308 <vPortSetupTimerInterrupt+0x3c>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	099b      	lsrs	r3, r3, #6
 80072e8:	4a08      	ldr	r2, [pc, #32]	@ (800730c <vPortSetupTimerInterrupt+0x40>)
 80072ea:	3b01      	subs	r3, #1
 80072ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ee:	4b03      	ldr	r3, [pc, #12]	@ (80072fc <vPortSetupTimerInterrupt+0x30>)
 80072f0:	2207      	movs	r2, #7
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr
 80072fc:	e000e010 	.word	0xe000e010
 8007300:	e000e018 	.word	0xe000e018
 8007304:	20000000 	.word	0x20000000
 8007308:	10624dd3 	.word	0x10624dd3
 800730c:	e000e014 	.word	0xe000e014

08007310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	@ 0x28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800731c:	f7ff fb3e 	bl	800699c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007320:	4b5c      	ldr	r3, [pc, #368]	@ (8007494 <pvPortMalloc+0x184>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007328:	f000 f924 	bl	8007574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800732c:	4b5a      	ldr	r3, [pc, #360]	@ (8007498 <pvPortMalloc+0x188>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4013      	ands	r3, r2
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 8095 	bne.w	8007464 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01e      	beq.n	800737e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007340:	2208      	movs	r2, #8
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	2b00      	cmp	r3, #0
 8007350:	d015      	beq.n	800737e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f023 0307 	bic.w	r3, r3, #7
 8007358:	3308      	adds	r3, #8
 800735a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00b      	beq.n	800737e <pvPortMalloc+0x6e>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	617b      	str	r3, [r7, #20]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d06f      	beq.n	8007464 <pvPortMalloc+0x154>
 8007384:	4b45      	ldr	r3, [pc, #276]	@ (800749c <pvPortMalloc+0x18c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d86a      	bhi.n	8007464 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800738e:	4b44      	ldr	r3, [pc, #272]	@ (80074a0 <pvPortMalloc+0x190>)
 8007390:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007392:	4b43      	ldr	r3, [pc, #268]	@ (80074a0 <pvPortMalloc+0x190>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007398:	e004      	b.n	80073a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d903      	bls.n	80073b6 <pvPortMalloc+0xa6>
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f1      	bne.n	800739a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <pvPortMalloc+0x184>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073bc:	429a      	cmp	r2, r3
 80073be:	d051      	beq.n	8007464 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2208      	movs	r2, #8
 80073c6:	4413      	add	r3, r2
 80073c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	1ad2      	subs	r2, r2, r3
 80073da:	2308      	movs	r3, #8
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	429a      	cmp	r2, r3
 80073e0:	d920      	bls.n	8007424 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <pvPortMalloc+0xfc>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	613b      	str	r3, [r7, #16]
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	1ad2      	subs	r2, r2, r3
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800741e:	69b8      	ldr	r0, [r7, #24]
 8007420:	f000 f90a 	bl	8007638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007424:	4b1d      	ldr	r3, [pc, #116]	@ (800749c <pvPortMalloc+0x18c>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	4a1b      	ldr	r2, [pc, #108]	@ (800749c <pvPortMalloc+0x18c>)
 8007430:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007432:	4b1a      	ldr	r3, [pc, #104]	@ (800749c <pvPortMalloc+0x18c>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b1b      	ldr	r3, [pc, #108]	@ (80074a4 <pvPortMalloc+0x194>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d203      	bcs.n	8007446 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800743e:	4b17      	ldr	r3, [pc, #92]	@ (800749c <pvPortMalloc+0x18c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <pvPortMalloc+0x194>)
 8007444:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	4b13      	ldr	r3, [pc, #76]	@ (8007498 <pvPortMalloc+0x188>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	431a      	orrs	r2, r3
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800745a:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <pvPortMalloc+0x198>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3301      	adds	r3, #1
 8007460:	4a11      	ldr	r2, [pc, #68]	@ (80074a8 <pvPortMalloc+0x198>)
 8007462:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007464:	f7ff faa8 	bl	80069b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <pvPortMalloc+0x17a>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60fb      	str	r3, [r7, #12]
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	e7fd      	b.n	8007486 <pvPortMalloc+0x176>
	return pvReturn;
 800748a:	69fb      	ldr	r3, [r7, #28]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3728      	adds	r7, #40	@ 0x28
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20001a98 	.word	0x20001a98
 8007498:	20001aac 	.word	0x20001aac
 800749c:	20001a9c 	.word	0x20001a9c
 80074a0:	20001a90 	.word	0x20001a90
 80074a4:	20001aa0 	.word	0x20001aa0
 80074a8:	20001aa4 	.word	0x20001aa4

080074ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d04f      	beq.n	800755e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074be:	2308      	movs	r3, #8
 80074c0:	425b      	negs	r3, r3
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4413      	add	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b25      	ldr	r3, [pc, #148]	@ (8007568 <vPortFree+0xbc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10b      	bne.n	80074f2 <vPortFree+0x46>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	60fb      	str	r3, [r7, #12]
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	e7fd      	b.n	80074ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00b      	beq.n	8007512 <vPortFree+0x66>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	60bb      	str	r3, [r7, #8]
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	e7fd      	b.n	800750e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	4b14      	ldr	r3, [pc, #80]	@ (8007568 <vPortFree+0xbc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01e      	beq.n	800755e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d11a      	bne.n	800755e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	4b0e      	ldr	r3, [pc, #56]	@ (8007568 <vPortFree+0xbc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	43db      	mvns	r3, r3
 8007532:	401a      	ands	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007538:	f7ff fa30 	bl	800699c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	4b0a      	ldr	r3, [pc, #40]	@ (800756c <vPortFree+0xc0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4413      	add	r3, r2
 8007546:	4a09      	ldr	r2, [pc, #36]	@ (800756c <vPortFree+0xc0>)
 8007548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800754a:	6938      	ldr	r0, [r7, #16]
 800754c:	f000 f874 	bl	8007638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007550:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <vPortFree+0xc4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3301      	adds	r3, #1
 8007556:	4a06      	ldr	r2, [pc, #24]	@ (8007570 <vPortFree+0xc4>)
 8007558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800755a:	f7ff fa2d 	bl	80069b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800755e:	bf00      	nop
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20001aac 	.word	0x20001aac
 800756c:	20001a9c 	.word	0x20001a9c
 8007570:	20001aa8 	.word	0x20001aa8

08007574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800757a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800757e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007580:	4b27      	ldr	r3, [pc, #156]	@ (8007620 <prvHeapInit+0xac>)
 8007582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00c      	beq.n	80075a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3307      	adds	r3, #7
 8007592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007620 <prvHeapInit+0xac>)
 80075a4:	4413      	add	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007624 <prvHeapInit+0xb0>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007624 <prvHeapInit+0xb0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075c0:	2208      	movs	r2, #8
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0307 	bic.w	r3, r3, #7
 80075ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a15      	ldr	r2, [pc, #84]	@ (8007628 <prvHeapInit+0xb4>)
 80075d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075d6:	4b14      	ldr	r3, [pc, #80]	@ (8007628 <prvHeapInit+0xb4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2200      	movs	r2, #0
 80075dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075de:	4b12      	ldr	r3, [pc, #72]	@ (8007628 <prvHeapInit+0xb4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007628 <prvHeapInit+0xb4>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4a0a      	ldr	r2, [pc, #40]	@ (800762c <prvHeapInit+0xb8>)
 8007602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a09      	ldr	r2, [pc, #36]	@ (8007630 <prvHeapInit+0xbc>)
 800760a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800760c:	4b09      	ldr	r3, [pc, #36]	@ (8007634 <prvHeapInit+0xc0>)
 800760e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	bc80      	pop	{r7}
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	20000e90 	.word	0x20000e90
 8007624:	20001a90 	.word	0x20001a90
 8007628:	20001a98 	.word	0x20001a98
 800762c:	20001aa0 	.word	0x20001aa0
 8007630:	20001a9c 	.word	0x20001a9c
 8007634:	20001aac 	.word	0x20001aac

08007638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007640:	4b27      	ldr	r3, [pc, #156]	@ (80076e0 <prvInsertBlockIntoFreeList+0xa8>)
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e002      	b.n	800764c <prvInsertBlockIntoFreeList+0x14>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d8f7      	bhi.n	8007646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	4413      	add	r3, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	d108      	bne.n	800767a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	441a      	add	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d118      	bne.n	80076c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <prvInsertBlockIntoFreeList+0xac>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d00d      	beq.n	80076b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	441a      	add	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e008      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076b6:	4b0b      	ldr	r3, [pc, #44]	@ (80076e4 <prvInsertBlockIntoFreeList+0xac>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e003      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d002      	beq.n	80076d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	20001a90 	.word	0x20001a90
 80076e4:	20001a98 	.word	0x20001a98

080076e8 <memset>:
 80076e8:	4603      	mov	r3, r0
 80076ea:	4402      	add	r2, r0
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d100      	bne.n	80076f2 <memset+0xa>
 80076f0:	4770      	bx	lr
 80076f2:	f803 1b01 	strb.w	r1, [r3], #1
 80076f6:	e7f9      	b.n	80076ec <memset+0x4>

080076f8 <_reclaim_reent>:
 80076f8:	4b29      	ldr	r3, [pc, #164]	@ (80077a0 <_reclaim_reent+0xa8>)
 80076fa:	b570      	push	{r4, r5, r6, lr}
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4604      	mov	r4, r0
 8007700:	4283      	cmp	r3, r0
 8007702:	d04b      	beq.n	800779c <_reclaim_reent+0xa4>
 8007704:	69c3      	ldr	r3, [r0, #28]
 8007706:	b1ab      	cbz	r3, 8007734 <_reclaim_reent+0x3c>
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	b16b      	cbz	r3, 8007728 <_reclaim_reent+0x30>
 800770c:	2500      	movs	r5, #0
 800770e:	69e3      	ldr	r3, [r4, #28]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	5959      	ldr	r1, [r3, r5]
 8007714:	2900      	cmp	r1, #0
 8007716:	d13b      	bne.n	8007790 <_reclaim_reent+0x98>
 8007718:	3504      	adds	r5, #4
 800771a:	2d80      	cmp	r5, #128	@ 0x80
 800771c:	d1f7      	bne.n	800770e <_reclaim_reent+0x16>
 800771e:	69e3      	ldr	r3, [r4, #28]
 8007720:	4620      	mov	r0, r4
 8007722:	68d9      	ldr	r1, [r3, #12]
 8007724:	f000 f864 	bl	80077f0 <_free_r>
 8007728:	69e3      	ldr	r3, [r4, #28]
 800772a:	6819      	ldr	r1, [r3, #0]
 800772c:	b111      	cbz	r1, 8007734 <_reclaim_reent+0x3c>
 800772e:	4620      	mov	r0, r4
 8007730:	f000 f85e 	bl	80077f0 <_free_r>
 8007734:	6961      	ldr	r1, [r4, #20]
 8007736:	b111      	cbz	r1, 800773e <_reclaim_reent+0x46>
 8007738:	4620      	mov	r0, r4
 800773a:	f000 f859 	bl	80077f0 <_free_r>
 800773e:	69e1      	ldr	r1, [r4, #28]
 8007740:	b111      	cbz	r1, 8007748 <_reclaim_reent+0x50>
 8007742:	4620      	mov	r0, r4
 8007744:	f000 f854 	bl	80077f0 <_free_r>
 8007748:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800774a:	b111      	cbz	r1, 8007752 <_reclaim_reent+0x5a>
 800774c:	4620      	mov	r0, r4
 800774e:	f000 f84f 	bl	80077f0 <_free_r>
 8007752:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007754:	b111      	cbz	r1, 800775c <_reclaim_reent+0x64>
 8007756:	4620      	mov	r0, r4
 8007758:	f000 f84a 	bl	80077f0 <_free_r>
 800775c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800775e:	b111      	cbz	r1, 8007766 <_reclaim_reent+0x6e>
 8007760:	4620      	mov	r0, r4
 8007762:	f000 f845 	bl	80077f0 <_free_r>
 8007766:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007768:	b111      	cbz	r1, 8007770 <_reclaim_reent+0x78>
 800776a:	4620      	mov	r0, r4
 800776c:	f000 f840 	bl	80077f0 <_free_r>
 8007770:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007772:	b111      	cbz	r1, 800777a <_reclaim_reent+0x82>
 8007774:	4620      	mov	r0, r4
 8007776:	f000 f83b 	bl	80077f0 <_free_r>
 800777a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800777c:	b111      	cbz	r1, 8007784 <_reclaim_reent+0x8c>
 800777e:	4620      	mov	r0, r4
 8007780:	f000 f836 	bl	80077f0 <_free_r>
 8007784:	6a23      	ldr	r3, [r4, #32]
 8007786:	b14b      	cbz	r3, 800779c <_reclaim_reent+0xa4>
 8007788:	4620      	mov	r0, r4
 800778a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800778e:	4718      	bx	r3
 8007790:	680e      	ldr	r6, [r1, #0]
 8007792:	4620      	mov	r0, r4
 8007794:	f000 f82c 	bl	80077f0 <_free_r>
 8007798:	4631      	mov	r1, r6
 800779a:	e7bb      	b.n	8007714 <_reclaim_reent+0x1c>
 800779c:	bd70      	pop	{r4, r5, r6, pc}
 800779e:	bf00      	nop
 80077a0:	20000010 	.word	0x20000010

080077a4 <__libc_init_array>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	2600      	movs	r6, #0
 80077a8:	4d0c      	ldr	r5, [pc, #48]	@ (80077dc <__libc_init_array+0x38>)
 80077aa:	4c0d      	ldr	r4, [pc, #52]	@ (80077e0 <__libc_init_array+0x3c>)
 80077ac:	1b64      	subs	r4, r4, r5
 80077ae:	10a4      	asrs	r4, r4, #2
 80077b0:	42a6      	cmp	r6, r4
 80077b2:	d109      	bne.n	80077c8 <__libc_init_array+0x24>
 80077b4:	f000 f870 	bl	8007898 <_init>
 80077b8:	2600      	movs	r6, #0
 80077ba:	4d0a      	ldr	r5, [pc, #40]	@ (80077e4 <__libc_init_array+0x40>)
 80077bc:	4c0a      	ldr	r4, [pc, #40]	@ (80077e8 <__libc_init_array+0x44>)
 80077be:	1b64      	subs	r4, r4, r5
 80077c0:	10a4      	asrs	r4, r4, #2
 80077c2:	42a6      	cmp	r6, r4
 80077c4:	d105      	bne.n	80077d2 <__libc_init_array+0x2e>
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077cc:	4798      	blx	r3
 80077ce:	3601      	adds	r6, #1
 80077d0:	e7ee      	b.n	80077b0 <__libc_init_array+0xc>
 80077d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d6:	4798      	blx	r3
 80077d8:	3601      	adds	r6, #1
 80077da:	e7f2      	b.n	80077c2 <__libc_init_array+0x1e>
 80077dc:	0800795c 	.word	0x0800795c
 80077e0:	0800795c 	.word	0x0800795c
 80077e4:	0800795c 	.word	0x0800795c
 80077e8:	08007960 	.word	0x08007960

080077ec <__retarget_lock_acquire_recursive>:
 80077ec:	4770      	bx	lr

080077ee <__retarget_lock_release_recursive>:
 80077ee:	4770      	bx	lr

080077f0 <_free_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4605      	mov	r5, r0
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d040      	beq.n	800787a <_free_r+0x8a>
 80077f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077fc:	1f0c      	subs	r4, r1, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bfb8      	it	lt
 8007802:	18e4      	addlt	r4, r4, r3
 8007804:	f000 f83c 	bl	8007880 <__malloc_lock>
 8007808:	4a1c      	ldr	r2, [pc, #112]	@ (800787c <_free_r+0x8c>)
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	b933      	cbnz	r3, 800781c <_free_r+0x2c>
 800780e:	6063      	str	r3, [r4, #4]
 8007810:	6014      	str	r4, [r2, #0]
 8007812:	4628      	mov	r0, r5
 8007814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007818:	f000 b838 	b.w	800788c <__malloc_unlock>
 800781c:	42a3      	cmp	r3, r4
 800781e:	d908      	bls.n	8007832 <_free_r+0x42>
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	1821      	adds	r1, r4, r0
 8007824:	428b      	cmp	r3, r1
 8007826:	bf01      	itttt	eq
 8007828:	6819      	ldreq	r1, [r3, #0]
 800782a:	685b      	ldreq	r3, [r3, #4]
 800782c:	1809      	addeq	r1, r1, r0
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	e7ed      	b.n	800780e <_free_r+0x1e>
 8007832:	461a      	mov	r2, r3
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b10b      	cbz	r3, 800783c <_free_r+0x4c>
 8007838:	42a3      	cmp	r3, r4
 800783a:	d9fa      	bls.n	8007832 <_free_r+0x42>
 800783c:	6811      	ldr	r1, [r2, #0]
 800783e:	1850      	adds	r0, r2, r1
 8007840:	42a0      	cmp	r0, r4
 8007842:	d10b      	bne.n	800785c <_free_r+0x6c>
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	4401      	add	r1, r0
 8007848:	1850      	adds	r0, r2, r1
 800784a:	4283      	cmp	r3, r0
 800784c:	6011      	str	r1, [r2, #0]
 800784e:	d1e0      	bne.n	8007812 <_free_r+0x22>
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	4408      	add	r0, r1
 8007856:	6010      	str	r0, [r2, #0]
 8007858:	6053      	str	r3, [r2, #4]
 800785a:	e7da      	b.n	8007812 <_free_r+0x22>
 800785c:	d902      	bls.n	8007864 <_free_r+0x74>
 800785e:	230c      	movs	r3, #12
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	e7d6      	b.n	8007812 <_free_r+0x22>
 8007864:	6820      	ldr	r0, [r4, #0]
 8007866:	1821      	adds	r1, r4, r0
 8007868:	428b      	cmp	r3, r1
 800786a:	bf01      	itttt	eq
 800786c:	6819      	ldreq	r1, [r3, #0]
 800786e:	685b      	ldreq	r3, [r3, #4]
 8007870:	1809      	addeq	r1, r1, r0
 8007872:	6021      	streq	r1, [r4, #0]
 8007874:	6063      	str	r3, [r4, #4]
 8007876:	6054      	str	r4, [r2, #4]
 8007878:	e7cb      	b.n	8007812 <_free_r+0x22>
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20001bec 	.word	0x20001bec

08007880 <__malloc_lock>:
 8007880:	4801      	ldr	r0, [pc, #4]	@ (8007888 <__malloc_lock+0x8>)
 8007882:	f7ff bfb3 	b.w	80077ec <__retarget_lock_acquire_recursive>
 8007886:	bf00      	nop
 8007888:	20001be8 	.word	0x20001be8

0800788c <__malloc_unlock>:
 800788c:	4801      	ldr	r0, [pc, #4]	@ (8007894 <__malloc_unlock+0x8>)
 800788e:	f7ff bfae 	b.w	80077ee <__retarget_lock_release_recursive>
 8007892:	bf00      	nop
 8007894:	20001be8 	.word	0x20001be8

08007898 <_init>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr

080078a4 <_fini>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr
